{"version":3,"file":"static/js/245.5811b58f.chunk.js","mappings":"2LAMMA,EAAQ,IAAIC,EAAAA,IACZC,EAAS,IAAID,EAAAA,IACf,GACAE,OAAOC,WAAWD,OAAOE,YACzB,GACA,KAGJH,EAAOI,SAASC,IAAI,EAAE,EAAE,KACxBP,EAAMQ,IAAIN,GAEV,IAAIO,EAAW,IAAIR,EAAAA,IAAqB,EAAG,GACrCS,EAAW,CACbC,OAAQ,CAAEC,KAAM,IAAKC,MAAO,GAC5BC,aAAc,CAAEF,KAAM,KAAMC,MAAO,IAAIZ,EAAAA,MAGvCc,EAAW,IAAId,EAAAA,IAAsB,CACrCS,SAAUA,EACVM,aCzBJ,yID0BIC,eEpBJ,6/BFuBIC,EAAO,IAAIjB,EAAAA,IAAYQ,EAAUM,GACrCf,EAAMQ,IAAKU,GAEX,IAKIC,EALEC,EAAW,IAAInB,EAAAA,IAMN,aACX,IAAMoB,GAAYC,EAAAA,EAAAA,UAWlB,SAASC,EAAQC,GACVL,IACLT,EAASC,OAAOE,OAASM,EAAMM,WAC/BL,EAASM,OAAO1B,EAAOE,GACvBC,OAAOwB,sBAAsBJ,GAC/B,CAEA,OAhBAK,EAAAA,EAAAA,YAAU,WAIR,OAHAT,EAAQ,IAAIlB,EAAAA,IACZoB,EAAUQ,QAAQC,YAAYV,EAASW,YACvCR,IACO,WACLJ,EAAQ,IACV,CACF,GAAG,KASIa,EAAAA,EAAAA,KAAA,OAAKC,IAAKZ,GACnB,CAzBe,IAAIa,EAAAA,EAAchC,EAAQkB,EAASW,YAE3CI,eAAgB,EACzBf,EAASgB,QAAQjC,OAAOC,WAAYD,OAAOE,Y","sources":["practice/shader/kaleidoscope/kaleidoscope.js","practice/shader/kaleidoscope/glsl/vShader.js","practice/shader/kaleidoscope/glsl/fShader.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as Three from 'three'\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\r\nimport vertexShader from './glsl/vShader'\r\nimport fragmentShader from './glsl/fShader'\r\n\r\nconst sence = new Three.Scene();\r\nconst camera = new Three.PerspectiveCamera(\r\n    75,\r\n    window.innerWidth/window.innerHeight,\r\n    0.1,\r\n    1000\r\n)\r\n\r\ncamera.position.set(0,0,1.5)\r\nsence.add(camera)\r\n\r\nvar geometry = new Three.PlaneGeometry( 2, 2 );\r\nconst uniforms = {\r\n    u_time: { type: \"f\", value: 1.0 },\r\n    u_resolution: { type: \"v2\", value: new Three.Vector2() }\r\n};\r\n\r\nvar material = new Three.ShaderMaterial( {\r\n    uniforms: uniforms,\r\n    vertexShader: vertexShader,\r\n    fragmentShader: fragmentShader\r\n} );\r\n\r\nvar mesh = new Three.Mesh( geometry, material );\r\nsence.add( mesh );\r\n\r\nconst renderer = new Three.WebGLRenderer()\r\nconst controls = new OrbitControls(camera, renderer.domElement)\r\n// 设置阻尼，让控制器更真实, 必须在动画循环调用update方法\r\ncontrols.enableDamping = true\r\nrenderer.setSize(window.innerWidth, window.innerHeight)\r\nlet clock;\r\nexport default function() {\r\n    const container = useRef()\r\n  \r\n    useEffect(() => {\r\n      clock = new Three.Clock();\r\n      container.current.appendChild(renderer.domElement)\r\n      refresh()\r\n      return () => {\r\n        clock = null;\r\n      }\r\n    }, [])\r\n\r\n    function refresh(time) {\r\n      if (!clock) return;\r\n      uniforms.u_time.value += clock.getDelta();\r\n      renderer.render(sence, camera)\r\n      window.requestAnimationFrame(refresh)\r\n    }\r\n  \r\n    return <div ref={container}></div>\r\n  }","export default /*glsl*/`  \r\nvarying vec2 vUv;\r\nvoid main() { \r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n}`;","// 默认左下角为0，0\r\n// gl_FragCoord.xy/u_resolution\r\n// d = sin(d*8. + u_time)/8.;\r\n//   d = abs(d);\r\n//   d = 0.02/d;\r\n//   col *= 1.0;\r\nexport default /*glsl*/`\r\nvarying vec2 vUv;\r\nuniform float u_time;\r\nuniform vec2 u_resolution;\r\n\r\nvec3 palette(float t) {\r\n    vec3 a = vec3(0.5);\r\n    vec3 b = vec3(0.5);\r\n    vec3 c = vec3(1.0);\r\n    vec3 d = vec3(0.263, 0.416, 0.557);\r\n    return a + b*cos(6.28318*(c*t*d));\r\n}\r\nvoid main() {\r\n  vec2 st = vUv.xy*2.0-1.0;\r\n  // 记录st重置前的位置\r\n  vec2 st2 = st;\r\n  vec3 finalCol = vec3(0.0);\r\n  for(float i = 0.0; i< 4.0; i++) {\r\n    // 每个块重置到中心\r\n    // st = fract(st * 2.0) - 0.5;\r\n    st = fract(st * 1.5) - 0.5;\r\n    // float d = length(st);\r\n    float d = length(st) * exp(-length(st2));\r\n    // 每个块单独变\r\n    // vec3 col = palette(d + u_time);\r\n    // 以整个画布变\r\n    vec3 col = palette(length(st2) + i*.4 + u_time*.4);\r\n    d = sin(d*8. + u_time)/8.;\r\n    d = abs(d);\r\n    // d = 0.01/d;\r\n    d = pow(0.01/d, 1.2);\r\n    // col *= d;\r\n    finalCol += col*d;\r\n  }\r\n  gl_FragColor = vec4(finalCol,1.0);\r\n}`\r\n"],"names":["sence","Three","camera","window","innerWidth","innerHeight","position","set","add","geometry","uniforms","u_time","type","value","u_resolution","material","vertexShader","fragmentShader","mesh","clock","renderer","container","useRef","refresh","time","getDelta","render","requestAnimationFrame","useEffect","current","appendChild","domElement","_jsx","ref","OrbitControls","enableDamping","setSize"],"sourceRoot":""}