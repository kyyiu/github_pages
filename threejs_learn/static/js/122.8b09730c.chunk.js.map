{"version":3,"file":"static/js/122.8b09730c.chunk.js","mappings":"2LAIMA,EAAQ,IAAIC,EAAAA,IACZC,EAAS,IAAID,EAAAA,IACf,GACAE,OAAOC,WAAWD,OAAOE,YACzB,GACA,KAGJH,EAAOI,SAASC,IAAI,EAAE,EAAE,IACxBP,EAAMQ,IAAIN,GAGV,IAAMO,EAAY,IAAIR,EAAAA,IAChBS,EAAmBD,EAAUE,KAAKC,EAAQ,OAIhDF,EAAiBG,UAAYZ,EAAAA,IAE7BS,EAAiBI,UAAYb,EAAAA,IAGRQ,EAAUE,KAAK,IAApC,IAEMI,EAAgB,IAAId,EAAAA,IAAwB,CAC9Ce,MAAO,UACPC,IAAKP,IAQHQ,EAAO,IAAIjB,EAAAA,IAAW,IAAIA,EAAAA,IAAwB,EAAE,EAAE,GAAIc,GAChEf,EAAMQ,IAAIU,GAEV,IAAMC,EAAQ,IAAIlB,EAAAA,IAAW,IAAIA,EAAAA,IAAoB,EAAE,GAAIc,GAC3DI,EAAMb,SAASC,IAAI,EAAG,EAAG,GACzBP,EAAMQ,IAAIW,GACV,IAAMC,EAAW,IAAInB,EAAAA,IAMN,aACX,IAAMoB,GAAYC,EAAAA,EAAAA,UAOlB,SAASC,EAAQC,GACfJ,EAASK,OAAOzB,EAAOE,GACvBC,OAAOuB,sBAAsBH,EAC/B,CAEA,OAVAI,EAAAA,EAAAA,YAAU,WACRN,EAAUO,QAAQC,YAAYT,EAASU,YACvCP,GACF,GAAG,KAOIQ,EAAAA,EAAAA,KAAA,OAAKC,IAAKX,GACnB,CAnBe,IAAIY,EAAAA,EAAc/B,EAAQkB,EAASU,YAE3CI,eAAgB,EACzBd,EAASe,QAAQhC,OAAOC,WAAYD,OAAOE,Y","sources":["practice/material/basic.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as Three from 'three'\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\r\n\r\nconst sence = new Three.Scene();\r\nconst camera = new Three.PerspectiveCamera(\r\n    75,\r\n    window.innerWidth/window.innerHeight,\r\n    0.1,\r\n    1000\r\n)\r\n\r\ncamera.position.set(0,0,10)\r\nsence.add(camera)\r\n\r\n// 导入纹理\r\nconst txtLoader = new Three.TextureLoader();\r\nconst reactLogoTexture = txtLoader.load(require(\"../../assets/img/react_logo.png\"))\r\n// 设置纹理显示算法\r\n// 取最接近的\r\n// 缩小滤镜\r\nreactLogoTexture.minFilter = Three.NearestFilter;\r\n// 放大滤镜\r\nreactLogoTexture.magFilter = Three.NearestFilter;\r\n// 透明滤镜\r\n// 一张图片，要完全透明的地方使用黑色0，完全显示的地方使用白色1\r\nconst aplhaTexture = txtLoader.load(\"\")\r\n// 材质\r\nconst basicMaterial = new Three.MeshBasicMaterial({\r\n    color: \"#fff000\",\r\n    map: reactLogoTexture,\r\n    // 自定义透明需要同时设置下面两个属性\r\n    // transparent: true,\r\n    // alphaMap: aplhaTexture\r\n    // 渲染哪一面\r\n    // side: Three.DoubleSide\r\n})\r\n\r\nconst cube = new Three.Mesh(new Three.BoxBufferGeometry(1,1,1), basicMaterial)\r\nsence.add(cube) \r\n// 添加平面\r\nconst plane = new Three.Mesh(new Three.PlaneGeometry(1,1), basicMaterial)\r\nplane.position.set(3, 0, 0)\r\nsence.add(plane)\r\nconst renderer = new Three.WebGLRenderer()\r\nconst controls = new OrbitControls(camera, renderer.domElement)\r\n// 设置阻尼，让控制器更真实, 必须在动画循环调用update方法\r\ncontrols.enableDamping = true\r\nrenderer.setSize(window.innerWidth, window.innerHeight)\r\n\r\nexport default function() {\r\n    const container = useRef()\r\n  \r\n    useEffect(() => {\r\n      container.current.appendChild(renderer.domElement)\r\n      refresh()\r\n    }, [])\r\n\r\n    function refresh(time) {\r\n      renderer.render(sence, camera)\r\n      window.requestAnimationFrame(refresh)\r\n    }\r\n  \r\n    return <div ref={container}></div>\r\n  }"],"names":["sence","Three","camera","window","innerWidth","innerHeight","position","set","add","txtLoader","reactLogoTexture","load","require","minFilter","magFilter","basicMaterial","color","map","cube","plane","renderer","container","useRef","refresh","time","render","requestAnimationFrame","useEffect","current","appendChild","domElement","_jsx","ref","OrbitControls","enableDamping","setSize"],"sourceRoot":""}