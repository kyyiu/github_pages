{"version":3,"file":"static/js/313.052c0f7e.chunk.js","mappings":"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","sources":["webpack://three/./src/practice/animation/musicVisible.module.css?c69b","practice/animation/musicVisible.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"importFile\":\"musicVisible_importFile__qY15a\",\"file\":\"musicVisible_file__Za42I\"};","import React, { useEffect, useRef } from \"react\";\r\nimport * as Three from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport styles from './musicVisible.module.css'\r\nconst sence = new Three.Scene();\r\nconst camera = new Three.PerspectiveCamera(\r\n  45,\r\n  window.innerWidth / window.innerHeight,\r\n  0.1,\r\n  1000\r\n)\r\ncamera.position.set(0, 40, 270)\r\ncamera.lookAt(new Three.Vector3(0,0,0))\r\nsence.add(camera)\r\n\r\nconst renderer = new Three.WebGLRenderer({ antialias: true })\r\nconst controls = new OrbitControls(camera, renderer.domElement)\r\n// 设置阻尼，让控制器更真实, 必须在动画循环调用update方法\r\ncontrols.enableDamping = true\r\nrenderer.setSize(window.innerWidth, window.innerHeight)\r\nrenderer.shadowMap.enabled = true\r\nrenderer.shadowMap.type = Three.PCFShadowMap\r\nlet file // 文件dom对象\r\nlet fileUrl //文件链接\r\nlet fftSize = 32 // 音乐数据频域长度\r\nlet analyser //音乐数据\r\nlet musicleDataArray = new Array(16) // 音乐数据数组\r\nlet plane // 地板\r\nlet dirLight // 光照\r\nlet material\r\nlet mesh = []\r\nlet tempGeometry = new Array(fftSize)\r\nlet audioObj\r\nexport default function () {\r\n  const container = useRef()\r\n\r\n  useEffect(() => {\r\n    addFloor()\r\n    addLight()\r\n    window.addEventListener('resize', onWindowResize, false);//窗口变化监听\r\n    container.current.appendChild(renderer.domElement)\r\n    return () => {\r\n      analyser = null\r\n    }\r\n  }, [])\r\n\r\n  function addLight() {\r\n    var target = new Three.Object3D();\r\n    // target.position = new Three.Vector3(0, 0, 0);\r\n\r\n    //生成一个方向光，模拟太阳光\r\n    var pointColor = \"#bbbbbb\";\r\n    dirLight = new Three.DirectionalLight(pointColor);\r\n    dirLight.position.set(0, 50, 50);\r\n    dirLight.castShadow = true;\r\n    dirLight.target = plane;\r\n\r\n    dirLight.shadow.CameraNear = 0.1;\r\n    dirLight.shadow.CameraFar = 100;\r\n    dirLight.shadow.CameraTop = 200;\r\n    dirLight.shadow.CameraBottom = 0;\r\n    dirLight.shadow.MapWidth = 2048;\r\n    dirLight.shadow.MapHeight = 2048;\r\n    var dirLight0 = dirLight.clone();\r\n    dirLight0.position.set(0, 50, -50);\r\n    sence.add(dirLight0);\r\n    sence.add(dirLight);\r\n    var ambientLight = new Three.AmbientLight(\"#0c0c0c\");//创建环境光\r\n    sence.add(ambientLight);\r\n  }\r\n\r\n  function addFloor() {\r\n\r\n    var planeGeometry = new Three.PlaneGeometry(500, 500);\r\n    var planeMaterial = new Three.MeshLambertMaterial({ color: 0xaaaaaa });\r\n    plane = new Three.Mesh(planeGeometry, planeMaterial);\r\n\r\n    plane.rotation.x = -Math.PI / 2;\r\n    plane.position.x = 0;\r\n    plane.position.y = 0;\r\n    plane.position.z = 0;\r\n    plane.receiveShadow = true;\r\n    sence.add(plane);\r\n  }\r\n\r\n  function onWindowResize() {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n\r\n    camera.aspect = width / height;//获得当前摄像机缩放比\r\n    camera.updateProjectionMatrix();//更新矩阵\r\n    renderer.setSize(width, height);\r\n  }\r\n\r\n  function refresh(time) {\r\n    if (!analyser) {\r\n      return\r\n    }\r\n    renderer.render(sence, camera)\r\n    window.requestAnimationFrame(renderAudio)\r\n  }\r\n\r\n  //随机颜色方法\r\n  function getColor() {\r\n    var colorElements = \"0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f\";\r\n    var colorArray = colorElements.split(\",\");\r\n    var color = \"#\";\r\n    for (var i = 0; i < 6; i++) {\r\n      color += colorArray[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  function addAudio() {\r\n    // 创建音频加载\r\n    const audioLoader = new Three.AudioLoader()\r\n    // 创建音频监听\r\n    const listener = new Three.AudioListener()\r\n    // 创建音频对象\r\n    const audio = new Three.Audio(listener)\r\n    audioObj = audio\r\n    audioLoader.load(fileUrl, function (audioBuffer) {\r\n      // 设置音频数据\r\n      audio.setBuffer(audioBuffer)\r\n      // 音频循环\r\n      audio.setLoop(true)\r\n      // 音频播放\r\n      audio.play()\r\n    })\r\n    // 音频数据分析\r\n    analyser = new Three.AudioAnalyser(audio, fftSize)\r\n    musicleDataArray = analyser.data\r\n    for (let i = 0; i < fftSize * 0.5; i++) {\r\n      tempGeometry[i] = new Three.BoxGeometry(12, 2, 12)\r\n      material = new Three.MeshPhongMaterial({ color: getColor() })\r\n      mesh[i] = new Three.Mesh(tempGeometry[i], material)\r\n      mesh[i].position.x = 20 * i - 160\r\n      mesh[i].castShadow = true\r\n      mesh[i].rotation.y = Math.PI / 4\r\n      sence.add(mesh[i])\r\n    }\r\n    renderAudio()\r\n  }\r\n  function renderAudio() {\r\n    if (!analyser) {\r\n      audioObj.stop()\r\n      return\r\n    }\r\n    // 更新音乐数据\r\n    analyser.getFrequencyData()\r\n    musicleDataArray = analyser.data\r\n    // 更改y缩放比例\r\n    for (let i = 0; i < fftSize * 0.5; i++) {\r\n      if (musicleDataArray[i] / 4 === 0) {\r\n        musicleDataArray[i] = 4\r\n      }\r\n      mesh[i].scale.y = musicleDataArray[i] / 4\r\n      mesh[i].position.y = 0\r\n    }\r\n    refresh()\r\n  }\r\n  function fileChange() {\r\n    file = document.getElementById('importFile').files[0]\r\n    // 创建文件链接\r\n    fileUrl = URL.createObjectURL(file)\r\n    container.current.style.display=\"block\";\r\n    //将打开文件Label隐藏\r\n    document.getElementById(\"label1\").style.display = \"none\";\r\n    addAudio()\r\n  }\r\n\r\n  return <div>\r\n    <label htmlFor=\"importFile\" className={styles.file} id=\"label1\"> 打开本地音频文件\r\n      <input type=\"file\" className={styles.importFile} id=\"importFile\" accept=\"audio/*\" onChange={fileChange} />\r\n    </label>\r\n    <div ref={container} style={{ display: 'none' }}></div>\r\n  </div>\r\n}"],"names":["sence","Three","camera","window","innerWidth","innerHeight","position","set","lookAt","add","file","fileUrl","renderer","antialias","OrbitControls","domElement","enableDamping","setSize","shadowMap","enabled","type","analyser","plane","dirLight","material","audioObj","fftSize","musicleDataArray","Array","mesh","tempGeometry","container","useRef","onWindowResize","width","height","aspect","updateProjectionMatrix","getColor","colorArray","split","color","i","Math","floor","random","renderAudio","getFrequencyData","data","scale","y","render","requestAnimationFrame","stop","useEffect","planeGeometry","planeMaterial","rotation","x","PI","z","receiveShadow","addFloor","pointColor","castShadow","target","shadow","CameraNear","CameraFar","CameraTop","CameraBottom","MapWidth","MapHeight","dirLight0","clone","ambientLight","addLight","addEventListener","current","appendChild","_jsxs","children","htmlFor","className","styles","id","_jsx","accept","onChange","document","getElementById","files","URL","createObjectURL","style","display","audioLoader","listener","audio","load","audioBuffer","setBuffer","setLoop","play","addAudio","ref"],"sourceRoot":""}