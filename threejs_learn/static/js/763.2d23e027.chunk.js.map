{"version":3,"file":"static/js/763.2d23e027.chunk.js","mappings":"iLAGMA,EAAQ,IAAIC,EAAAA,IACZC,EAAS,IAAID,EAAAA,IACf,GACAE,OAAOC,WAAWD,OAAOE,YACzB,GACA,KAGJH,EAAOI,SAASC,IAAI,EAAE,EAAE,IACxBP,EAAMQ,IAAIN,GAEV,IAGIO,EAAWC,EAHTC,EAAW,IAAIV,EAAAA,IAIN,aACX,IAAMW,GAAYC,EAAAA,EAAAA,UAkBlB,SAASC,EAAQC,GACXN,IACFA,EAAUO,SAASC,IAAIC,aAAc,EACrCR,EAAcS,UAAY,QACvBC,KAAKC,MAAoB,IAAdD,KAAKE,UAAgB,IAChCF,KAAKC,MAAoB,IAAdD,KAAKE,UAAgB,IAChCF,KAAKC,MAAoB,IAAdD,KAAKE,UAAgB,KAC/BF,KAAKE,SAAW,IAAM,IAC1BZ,EAAca,YACdb,EAAcc,IAAI,KAAOJ,KAAKE,SAAU,KAAKF,KAAKE,SAAS,GAAqB,GAAhBF,KAAKE,SAAc,EAAU,EAARF,KAAKK,IAAK,GAC/Ff,EAAcgB,YACfhB,EAAciB,QAEfhB,EAASiB,OAAO5B,EAAOE,GACvBC,OAAO0B,sBAAsBf,EAC/B,CAEA,OAjCAgB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAQ,KACfH,EAAOI,OAAS,MAChBzB,EAAgBqB,EAAOK,WAAW,OACpBjB,UAAU,UACxBT,EAAc2B,SAAS,EAAG,EAAGN,EAAOG,MAAOH,EAAOI,QAClD,IAAMG,EAAU,IAAIrC,EAAAA,IAAc8B,GAC5BQ,EAAI,IAAItC,EAAAA,IAAoB,GAAI,GAAI,GACpCuC,EAAI,IAAIvC,EAAAA,IAAwB,CAACgB,IAAKqB,EAASG,aAAa,EAAMC,QAAS,EAAGC,MAAO,WAC3FlC,EAAY,IAAIR,EAAAA,IAAWsC,EAAGC,GAC9BxC,EAAMQ,IAAIC,GACVG,EAAUgC,QAAQC,YAAYlC,EAASmC,YACvChC,GACF,GAAG,KAmBIiC,EAAAA,EAAAA,KAAA,OAAKC,IAAKpC,GACnB,CAxCFD,EAASsC,QAAQ9C,OAAOC,WAAYD,OAAOE,Y","sources":["practice/interactive/graffiti.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as Three from 'three'\r\n\r\nconst sence = new Three.Scene();\r\nconst camera = new Three.PerspectiveCamera(\r\n    75,\r\n    window.innerWidth/window.innerHeight,\r\n    0.1,\r\n    1000\r\n)\r\n\r\ncamera.position.set(0,0,10)\r\nsence.add(camera)\r\n\r\nconst renderer = new Three.WebGLRenderer()\r\nrenderer.setSize(window.innerWidth, window.innerHeight)\r\n\r\nlet canvasGeo, canvasContext\r\nexport default function() {\r\n    const container = useRef()\r\n  \r\n    useEffect(() => {\r\n      const canvas = document.createElement(\"canvas\")\r\n      canvas.width = 1024\r\n      canvas.height = 1024\r\n      canvasContext = canvas.getContext('2d')\r\n      canvasContext.fillStyle=\"#ffffff\"\r\n      canvasContext.fillRect(0, 0, canvas.width, canvas.height);\r\n      const texture = new Three.Texture(canvas)\r\n      const g = new Three.PlaneGeometry(12, 12, 4)\r\n      const m = new Three.MeshBasicMaterial({map: texture, transparent: true, opacity: 1, color: 0xffffff})\r\n      canvasGeo = new Three.Mesh(g, m)\r\n      sence.add(canvasGeo)\r\n      container.current.appendChild(renderer.domElement)\r\n      refresh()\r\n    }, [])\r\n\r\n    function refresh(time) {\r\n      if (canvasGeo) {\r\n        canvasGeo.material.map.needsUpdate = true;\r\n        canvasContext.fillStyle = \"rgba(\"\r\n          +Math.floor(Math.random()*255) + \",\"\r\n          +Math.floor(Math.random()*255) + \",\"\r\n          +Math.floor(Math.random()*255) + \",\"\r\n          +(Math.random() - .1) + \")\";\r\n        canvasContext.beginPath();\r\n        canvasContext.arc(1024 * Math.random(), 1024*Math.random(),10 + Math.random() * 50,0,Math.PI*2,true);\r\n        canvasContext.closePath();\r\n\t      canvasContext.fill();\r\n      }\r\n      renderer.render(sence, camera)\r\n      window.requestAnimationFrame(refresh)\r\n    }\r\n  \r\n    return <div ref={container}></div>\r\n  }"],"names":["sence","Three","camera","window","innerWidth","innerHeight","position","set","add","canvasGeo","canvasContext","renderer","container","useRef","refresh","time","material","map","needsUpdate","fillStyle","Math","floor","random","beginPath","arc","PI","closePath","fill","render","requestAnimationFrame","useEffect","canvas","document","createElement","width","height","getContext","fillRect","texture","g","m","transparent","opacity","color","current","appendChild","domElement","_jsx","ref","setSize"],"sourceRoot":""}