{"version":3,"file":"static/js/755.cff28b54.chunk.js","mappings":"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","sources":["webpack://three/./src/practice/interactive/popDialog.module.css?1ac5","utils/cordinnate.js","practice/interactive/popDialog.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"popDialog_container__kabIr\",\"callout\":\"popDialog_callout__ZtUdL\"};","import * as Three from 'three'\r\n\r\n/** 获取物体在画布上的浏览器界面坐标 */\r\nexport const getObjInCanvasCoordinate = function(object, renderer, camera) {\r\n  // 参考 https://stackoverflow.com/questions/27409074/converting-3d-position-to-2d-screen-position-r69\r\n  const v = new Three.Vector3();\r\n  object.updateMatrixWorld();\r\n  v.setFromMatrixPosition(object.matrixWorld)\r\n  v.project(camera)\r\n  var widthHalf = 0.5* renderer.domElement.width;\r\n  var heightHalf = 0.5* renderer.domElement.height;\r\n\r\n  // var eltx = (1 + projected.x) * container.current.offsetWidth / 2 ;\r\n  // var elty = (1 - projected.y) * container.current.offsetHeight / 2;\r\n  var eltx = ( v.x * widthHalf ) + widthHalf;\r\n  var elty = - ( v.y * heightHalf ) + heightHalf;\r\n  \r\n  var offset = renderer.domElement;\t\r\n  eltx += offset.offsetLeft;\r\n  elty += offset.offsetTop;\r\n    \r\n  return { x : eltx, y : elty };\r\n}\r\n\r\nexport default {\r\n  getObjInCanvasCoordinate\r\n}","import React, { useEffect, useRef } from \"react\";\r\nimport * as Three from 'three'\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\r\nimport styles from './popDialog.module.css'\r\nimport { coordinate } from \"../../utils\";\r\n\r\nconst sence = new Three.Scene();\r\nconst camera = new Three.PerspectiveCamera(\r\n    75,\r\n    window.innerWidth/window.innerHeight,\r\n    0.1,\r\n    1000\r\n)\r\n\r\ncamera.position.set(0,0,10)\r\ncamera.aspect = window.innerWidth / window.innerHeight;\r\ncamera.updateProjectionMatrix();\r\nsence.add(camera)\r\n\r\nconst light = new Three.DirectionalLight( 0xffffff, 3 );\r\nlight.position.set( 1, 1, 1 ).normalize();\r\nsence.add( light );\r\n\r\nconst g = new Three.BoxGeometry(1, 1, 1)\r\nconst m = new Three.MeshLambertMaterial({color: Math.random() * 0xffffff })\r\nconst cube = new Three.Mesh(g, m)\r\ncube.customData = {\r\n  html: `<div>我是弹窗1</div>`\r\n}\r\nconst g2 = new Three.BoxGeometry(1, 1, 1)\r\nconst m2 = new Three.MeshLambertMaterial({color: Math.random() * 0xffffff })\r\nconst cube2 = new Three.Mesh(g2, m2)\r\ncube2.customData = {\r\n  html: `<div>我是弹窗2</div>`\r\n}\r\ncube2.position.set(2,2,2)\r\nsence.add(cube)\r\nsence.add(cube2)\r\n\r\nconst renderer = new Three.WebGLRenderer({alpha: true})\r\nrenderer.setClearAlpha(0.5)\r\nrenderer.setPixelRatio( window.devicePixelRatio );\r\nconst controls = new OrbitControls(camera, renderer.domElement)\r\n// 设置阻尼，让控制器更真实, 必须在动画循环调用update方法\r\ncontrols.enableDamping = true\r\nrenderer.setSize(window.innerWidth, window.innerHeight)\r\n\r\nlet raycaster,pointer, curObj\r\nexport default function() {\r\n    const container = useRef()\r\n    const callOut = useRef()\r\n    const titleContainer = useRef()\r\n    useEffect(() => {\r\n      raycaster = new Three.Raycaster()\r\n      pointer   = new Three.Vector2()\r\n      container.current.appendChild(renderer.domElement)\r\n      container.current.addEventListener(\"click\", onPointerMove, false)\r\n      refresh()\r\n    }, [])\r\n\r\n    function getObjectScreenPosition(object)\r\n    {\t\r\n      return coordinate.getObjInCanvasCoordinate(object, renderer, camera)\r\n      // var pos = new Three.Vector3();\r\n      // pos = pos.clone().applyMatrix4(object.matrix);\r\n    \r\n      // // const projected = pos.clone();\r\n      // const projected = pos;\r\n      // 物体坐标转屏幕坐标\r\n      // 参考 https://stackoverflow.com/questions/27409074/converting-3d-position-to-2d-screen-position-r69\r\n      const v = new Three.Vector3();\r\n      object.updateMatrixWorld();\r\n      v.setFromMatrixPosition(object.matrixWorld)\r\n      v.project(camera)\r\n      var widthHalf = 0.5* renderer.domElement.width;\r\n      var heightHalf = 0.5* renderer.domElement.height;\r\n    \r\n      // var eltx = (1 + projected.x) * container.current.offsetWidth / 2 ;\r\n      // var elty = (1 - projected.y) * container.current.offsetHeight / 2;\r\n      var eltx = ( v.x * widthHalf ) + widthHalf;\r\n      var elty = - ( v.y * heightHalf ) + heightHalf;\r\n      \r\n      var offset = renderer.domElement;\t\r\n      eltx += offset.offsetLeft;\r\n      elty += offset.offsetTop;\r\n        \r\n      return { x : eltx, y : elty };\r\n    }\r\n\r\n    function onPointerMove(e) {\r\n      // 将鼠标位置归一化为设备坐标。x 和 y 方向的取值范围是 (-1 to +1)\r\n      pointer.x = (e.clientX / window.innerWidth) * 2 -1\r\n      pointer.y = -(e.clientY/window.innerHeight) * 2 +1 \r\n      raycaster.setFromCamera(pointer, camera)\r\n      // 计算物体和射线的焦点\r\n      const intersects = raycaster.intersectObjects( sence.children, false );\r\n      if (intersects.length) {\r\n        curObj = intersects[0]\r\n        const screenpos = getObjectScreenPosition(curObj.object);\r\n        curObj.object.material.emissive.setHex(0xff0000)\r\n        callOut.current.style.display = 'block'\r\n        callOut.current.style.left = (screenpos.x - callOut.current.offsetWidth / 2)+ \"px\";\r\n        callOut.current.style.top = `${screenpos.y}px`\r\n        titleContainer.current.innerHTML = curObj.object.customData.html;\r\n      } else {\r\n        if (curObj) {\r\n          curObj.object.material.emissive.setHex(0x0000ff)\r\n          curObj = null\r\n        }\r\n        callOut.current.style.display = 'none'\r\n      }\r\n    }\r\n\r\n    function refresh(time) {\r\n      renderer.render(sence, camera)\r\n      window.requestAnimationFrame(refresh)\r\n    }\r\n\r\n    function onSelectClicked() {\r\n      const dom = callOut.current\r\n      if (dom) {\r\n        dom.style.display = 'none'\r\n      }\r\n    }\r\n  \r\n    return <div>\r\n      <h1 style={{display: 'none'}}>Shipster - Choose Your Ship</h1>\r\n      <div className={styles.container}  ref={container}></div>\r\n      <div className={styles.callout} ref={callOut}>\r\n        <div className={styles.header} ref={titleContainer}></div>\r\n        <div className={styles.contents}>我是介绍</div>\r\n        <div className={styles.selectButton}><button onClick={onSelectClicked}>关闭</button></div>\r\n      </div>\r\n    </div>\r\n  }"],"names":["getObjInCanvasCoordinate","object","renderer","camera","v","Three","updateMatrixWorld","setFromMatrixPosition","matrixWorld","project","widthHalf","domElement","width","heightHalf","height","eltx","x","elty","y","offset","offsetLeft","offsetTop","sence","window","innerWidth","innerHeight","position","set","aspect","updateProjectionMatrix","add","light","normalize","g","m","color","Math","random","cube","customData","html","g2","m2","cube2","raycaster","pointer","curObj","alpha","container","useRef","callOut","titleContainer","onPointerMove","e","clientX","clientY","setFromCamera","intersects","intersectObjects","children","length","screenpos","coordinate","material","emissive","setHex","current","style","display","left","offsetWidth","top","concat","innerHTML","refresh","time","render","requestAnimationFrame","useEffect","appendChild","addEventListener","_jsxs","_jsx","className","styles","ref","onClick","dom","setClearAlpha","setPixelRatio","devicePixelRatio","OrbitControls","enableDamping","setSize"],"sourceRoot":""}