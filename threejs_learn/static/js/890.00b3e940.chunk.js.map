{"version":3,"file":"static/js/890.00b3e940.chunk.js","mappings":"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","sources":["practice/particle/pointCloud.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as Three from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport * as dat from 'dat.gui'\r\nconst sence = new Three.Scene();\r\nconst camera = new Three.PerspectiveCamera(\r\n  45,\r\n  window.innerWidth / window.innerHeight,\r\n  0.1,\r\n  1000\r\n)\r\n\r\ncamera.position.set(20, 0, 150)\r\nsence.add(camera)\r\n\r\nconst renderer = new Three.WebGLRenderer()\r\nconst controls_o = new OrbitControls(camera, renderer.domElement)\r\n// 设置阻尼，让控制器更真实, 必须在动画循环调用update方法\r\ncontrols_o.enableDamping = true\r\nrenderer.setSize(window.innerWidth, window.innerHeight)\r\nlet cloud, controls, gui, step = 0\r\n\r\nlet xm \r\nlet rot = [], bGeometry\r\n\r\nexport default function () {\r\n  const container = useRef()\r\n\r\n  useEffect(() => {\r\n    // init2(container)\r\n    // refresh()\r\n    // return\r\n    init()\r\n      // createParticles(15,)\r\n    window.addEventListener('resize', onWindowResize, false);//窗口变化监听\r\n    container.current.appendChild(renderer.domElement)\r\n    refresh()\r\n  }, [])\r\n\r\n  function init() {\r\n    // sence.fog = new Three.Fog(0xffffff, 1, 10)\r\n    controls = new function () {\r\n      this.size = 8\r\n      this.transparent = true\r\n      this.opacity = 0.6\r\n      this.vertexColors = true\r\n      this.color = 0xffffff\r\n      this.sizeAttenuation = true;\r\n      this.rotateSystem = true\r\n      this.redraw = function () {\r\n        if (sence.getObjectByName(\"particles\")) {\r\n          sence.remove(sence.getObjectByName(\"particles\"))\r\n        }\r\n        createParticles(controls.size, controls.transparent, controls.opacity, controls.vertexColors, controls.sizeAttenuation, controls.color)\r\n      }\r\n    }\r\n\r\n    gui = new dat.GUI()\r\n    gui.add(controls, 'size', 0, 10).onChange(controls.redraw);\r\n    gui.add(controls, 'transparent').onChange(controls.redraw);\r\n    gui.add(controls, 'opacity', 0, 1).onChange(controls.redraw);\r\n    // gui.add(controls, 'vertexColors').onChange(controls.redraw);\r\n    gui.addColor(controls, 'color').onChange(controls.redraw);\r\n    gui.add(controls, 'sizeAttenuation').onChange(controls.redraw);\r\n    gui.add(controls, 'rotateSystem');\r\n\r\n    controls.redraw();\r\n  }\r\n\r\n  function createParticles(size, transparent, opacity, vertexColors, sizeAttenuation, color) {\r\n    color =  new Three.Color(color)\r\n    const g = new Three.BufferGeometry()\r\n    bGeometry = g\r\n    const range = 500\r\n    const arr = []\r\n    for (let i = 0; i < 1500; i++) {\r\n      rot.push(Math.random() * Math.PI * 2);\r\n      arr.push(Math.random() * range - range / 2, Math.random() * range - range / 2, Math.random() * range - range / 2)\r\n    }\r\n    // const vertices = new Float32Array(arr)\r\n    g.setAttribute('position', new Three.Float32BufferAttribute(arr, 3))\r\n    g.setAttribute(\"rotation\", new Three.Float32BufferAttribute(rot, 1));\r\n    \r\n    xm = new Three.PointsMaterial({\r\n      // vertexColors: true, \r\n      size: size,\r\n      map: new Three.TextureLoader().load(require(\"./imgs/snow.png\"), t => t.colorSpace = Three.SRGBColorSpace),\r\n      // transparent: transparent,\r\n      // opacity: opacity,\r\n      color: 0xff0000,\r\n      //sizeAttenuation false ��Сһ�� �������λ���޹�\r\n      //true ����ԶС\r\n      // sizeAttenuation: sizeAttenuation,\r\n      // color: color, // 粒子系統中所有粒子的材質顏色。若 vertexColors 設為 true，則會將此值乘以頂點顏色得到最終呈現的顏色。預設為 0xffffff 白色。\r\n      blending: Three.AdditiveBlending, // 渲染材質時的融合模式。用來調整載入的材質如何與背景融合。THREE.AdditiveBlending，就是在渲染粒子時背景的顏色會被添加到粒子的背景上\r\n      depthTest: false, //  depthTest 有關掉的話，會將融合模式中吃到的背景色，在兩片雪花疊加時有透明效果而不會被遮擋住。\r\n      // onBeforeCompile: shader => {\r\n      //   shader.vertexShader = `\r\n      //     attribute float rotation;\r\n      //     varying float vRotation;\r\n      //     ${shader.vertexShader}\r\n      //   `.replace(\r\n      //     `#include <fog_vertex>`,\r\n      //     `#include <fog_vertex>\r\n      //     vRotation = rotation;\r\n      //     `\r\n      //   );\r\n      //   console.log(shader.vertexShader);\r\n      //   shader.fragmentShader = `\r\n      //     varying float vRotation;\r\n      //     ${shader.fragmentShader}\r\n      //   `.replace(\r\n      //     `#include <map_particle_fragment>`,\r\n      //     `\r\n      //     #if defined( USE_MAP ) || defined( USE_ALPHAMAP )\r\n      //       vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\r\n      //     #endif\r\n      //     #ifdef USE_MAP\r\n      //       // MODIFICATION =======================================================\r\n      //       float mid = 0.5;\r\n      //       uv = vec2(\r\n      //         cos(vRotation) * (uv.x - mid) + sin(vRotation) * (uv.y - mid) + mid,\r\n      //         cos(vRotation) * (uv.y - mid) - sin(vRotation) * (uv.x - mid) + mid\r\n      //       );\r\n      //       vec4 mapTexel = texture2D( map, uv );\r\n      //       diffuseColor *= mapTexelToLinear( mapTexel );\r\n      //     #endif\r\n      //     #ifdef USE_ALPHAMAP\r\n      //       diffuseColor.a *= texture2D( alphaMap, uv ).g;\r\n      //     #endif\r\n      //     `\r\n      //   );\r\n      //   console.log(shader.fragmentShader);\r\n      // } \r\n    })\r\n    xm.color.setHSL(color.r, color.g, color.b, Three.SRGBColorSpace)\r\n    \r\n    cloud = new Three.Points(g, xm)\r\n    cloud.name = 'particles'\r\n    console.log(cloud)\r\n    sence.add(cloud)\r\n  }\r\n\r\n  function onWindowResize() {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n\r\n    camera.aspect = width / height;//获得当前摄像机缩放比\r\n    camera.updateProjectionMatrix();//更新矩阵\r\n    renderer.setSize(width, height);\r\n  }\r\n\r\n  function refresh() {\r\n    // const time = Date.now() * 0.0005;\r\n    // const color = [ 1.0, 0.2, 0.5 ];\r\n    // const h = ( 360 * ( color[ 0 ] + time ) % 360 ) / 360;\r\n    // xm.color.setHSL( h, color[ 1 ], color[ 2 ])\r\n    // // renderer.render(scene, camera)\r\n    // renderer.render(sence, camera)\r\n    // window.requestAnimationFrame(refresh)\r\n    // return\r\n    \r\n    if (controls.rotateSystem) {\r\n      step += 0.001\r\n      // const time = Date.now() * 0.00005;\r\n      // const c = [0.95, 0.1, 0.5]\r\n      // const h = (360 * ((c[0] + time) % 360)) / 360;\r\n      // xm.color.setHSL( h, c[1], c[2], Three.SRGBColorSpace)\r\n      cloud.rotation.x = step;\r\n      cloud.rotation.z = step;\r\n      // cloud.rotation.y = step;\r\n    }\r\n    renderer.render(sence, camera)\r\n    window.requestAnimationFrame(refresh)\r\n  }\r\n\r\n  return <div ref={container}></div>\r\n}"],"names":["sence","Three","camera","window","innerWidth","innerHeight","position","set","add","renderer","OrbitControls","domElement","enableDamping","setSize","cloud","controls","gui","xm","step","rot","container","useRef","onWindowResize","width","height","aspect","updateProjectionMatrix","refresh","rotateSystem","rotation","x","z","render","requestAnimationFrame","useEffect","this","size","transparent","opacity","vertexColors","color","sizeAttenuation","redraw","getObjectByName","remove","g","range","arr","i","push","Math","random","PI","setAttribute","map","load","require","t","colorSpace","blending","depthTest","setHSL","r","b","name","console","log","createParticles","dat","onChange","addColor","addEventListener","current","appendChild","_jsx","ref"],"sourceRoot":""}