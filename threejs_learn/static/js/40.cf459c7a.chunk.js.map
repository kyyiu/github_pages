{"version":3,"file":"static/js/40.cf459c7a.chunk.js","mappings":"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","sources":["practice/comprehensive/utils/city2/modifyCityMaterial.js","practice/comprehensive/utils/city2/flyLine.js","practice/comprehensive/shader/city2/flyLine.js","practice/comprehensive/utils/city2/lightWall.js","practice/comprehensive/utils/city2/radar.js","practice/comprehensive/utils/city2/sign.js","webpack://three/./src/practice/comprehensive/css/city2.module.css?d29a","practice/comprehensive/city2.js","../node_modules/three/examples/jsm/loaders/DRACOLoader.js"],"sourcesContent":["import * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\nexport default function modifyCityMaterial(mesh) {\r\n  mesh.material.onBeforeCompile = (shader) => {\r\n    // console.log(shader.vertexShader);\r\n    // console.log(shader.fragmentShader);\r\n    shader.fragmentShader = shader.fragmentShader.replace(\r\n      \"#include <dithering_fragment>\",\r\n      `\r\n        #include <dithering_fragment>\r\n        //#end#\r\n    `\r\n    );\r\n    addGradColor(shader, mesh);\r\n    addSpread(shader);\r\n    // addLightLine(shader);\r\n    // addToTopLine(shader);\r\n  };\r\n}\r\n\r\nexport function addGradColor(shader, mesh) {\r\n  mesh.geometry.computeBoundingBox();\r\n  //   console.log(mesh.geometry.boundingBox);\r\n\r\n  let { min, max } = mesh.geometry.boundingBox;\r\n  //   获取物体的高度差\r\n  let uHeight = max.y - min.y;\r\n\r\n  shader.uniforms.uTopColor = {\r\n    value: new THREE.Color(\"#aaaeff\"),\r\n  };\r\n  shader.uniforms.uHeight = {\r\n    value: uHeight,\r\n  };\r\n  shader.vertexShader = shader.vertexShader.replace(\r\n    \"#include <common>\",\r\n    `\r\n      #include <common>\r\n      varying vec3 vPosition;\r\n      `\r\n  );\r\n\r\n  shader.vertexShader = shader.vertexShader.replace(\r\n    \"#include <begin_vertex>\",\r\n    `\r\n      #include <begin_vertex>\r\n      vPosition = position;\r\n  `\r\n  );\r\n\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    \"#include <common>\",\r\n    `\r\n      #include <common>\r\n      \r\n      uniform vec3 uTopColor;\r\n      uniform float uHeight;\r\n      varying vec3 vPosition;\r\n\r\n        `\r\n  );\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    \"//#end#\",\r\n    `\r\n      \r\n      vec4 distGradColor = gl_FragColor;\r\n\r\n      // 设置混合的百分比\r\n      float gradMix = (vPosition.y+uHeight/2.0)/uHeight;\r\n      // 计算出混合颜色\r\n      vec3 gradMixColor = mix(distGradColor.xyz,uTopColor,gradMix);\r\n      gl_FragColor = vec4(gradMixColor,1);\r\n        //#end#\r\n\r\n      `\r\n  );\r\n}\r\n// 添加建筑材质光波扩散特效\r\nexport function addSpread(shader, center = new THREE.Vector2(0, 0)) {\r\n  // 设置扩散的中心点\r\n  shader.uniforms.uSpreadCenter = { value: center };\r\n  //   扩散的时间\r\n  shader.uniforms.uSpreadTime = { value: -2000 };\r\n  //   设置条带的宽度\r\n  shader.uniforms.uSpreadWidth = { value: 40 };\r\n\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    \"#include <common>\",\r\n    `\r\n      #include <common>\r\n\r\n      uniform vec2 uSpreadCenter;\r\n      uniform float uSpreadTime;\r\n      uniform float uSpreadWidth;\r\n      `\r\n  );\r\n\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    \"//#end#\",\r\n    `\r\n     float spreadRadius = distance(vPosition.xz,uSpreadCenter);\r\n    //  扩散范围的函数\r\n    // 根据 -x^2+b 函数 实现\r\n    float spreadIndex = -(spreadRadius-uSpreadTime)*(spreadRadius-uSpreadTime)+uSpreadWidth;\r\n\r\n    if(spreadIndex>0.0){\r\n        gl_FragColor = mix(gl_FragColor,vec4(1,1,1,1),spreadIndex/uSpreadWidth);\r\n    }\r\n\r\n    //#end#\r\n    `\r\n  );\r\n\r\n  gsap.to(shader.uniforms.uSpreadTime, {\r\n    value: 800,\r\n    duration: 3,\r\n    ease: \"none\",\r\n    repeat: -1,\r\n  });\r\n}\r\n\r\nexport function addLightLine(shader) {\r\n  //   扩散的时间\r\n  shader.uniforms.uLightLineTime = { value: -1500 };\r\n  //   设置条带的宽度\r\n  shader.uniforms.uLightLineWidth = { value: 200 };\r\n\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    \"#include <common>\",\r\n    `\r\n        #include <common>\r\n  \r\n        \r\n        uniform float uLightLineTime;\r\n        uniform float uLightLineWidth;\r\n        `\r\n  );\r\n\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    \"//#end#\",\r\n    `\r\n      float LightLineMix = -(vPosition.x+vPosition.z-uLightLineTime)*(vPosition.x+vPosition.z-uLightLineTime)+uLightLineWidth;\r\n  \r\n      if(LightLineMix>0.0){\r\n          gl_FragColor = mix(gl_FragColor,vec4(0.8,1.0,1.0,1),LightLineMix /uLightLineWidth);\r\n          \r\n      }\r\n  \r\n      //#end#\r\n      `\r\n  );\r\n\r\n  gsap.to(shader.uniforms.uLightLineTime, {\r\n    value: 1500,\r\n    duration: 5,\r\n    ease: \"none\",\r\n    repeat: -1,\r\n  });\r\n}\r\n\r\nexport function addToTopLine(shader) {\r\n  //   扩散的时间\r\n  shader.uniforms.uToTopTime = { value: 0 };\r\n  //   设置条带的宽度\r\n  shader.uniforms.uToTopWidth = { value: 40 };\r\n\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    \"#include <common>\",\r\n    `\r\n          #include <common>\r\n    \r\n          \r\n          uniform float uToTopTime;\r\n          uniform float uToTopWidth;\r\n          `\r\n  );\r\n\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    \"//#end#\",\r\n    `\r\n        float ToTopMix = -(vPosition.y-uToTopTime)*(vPosition.y-uToTopTime)+uToTopWidth;\r\n    \r\n        if(ToTopMix>0.0){\r\n            gl_FragColor = mix(gl_FragColor,vec4(0.8,0.8,1,1),ToTopMix /uToTopWidth);\r\n            \r\n        }\r\n    \r\n        //#end#\r\n        `\r\n  );\r\n\r\n  gsap.to(shader.uniforms.uToTopTime, {\r\n    value: 500,\r\n    duration: 3,\r\n    ease: \"none\",\r\n    repeat: -1,\r\n  });\r\n}\r\n","import * as THREE from 'three'\r\nimport gsap from 'gsap'\r\n\r\nexport default class FlyLine {\r\n  constructor() {\r\n    const points = [\r\n      new THREE.Vector3(0,0,0),\r\n      new THREE.Vector3(5,4,0),\r\n      new THREE.Vector3(10,0,0),\r\n    ]\r\n    // 创建曲线\r\n    this.lineCurve = new THREE.CatmullRomCurve3(points)\r\n    // 生成管道几何体\r\n    this.geometry = new THREE.TubeBufferGeometry(this.lineCurve, 100, 0.4, 2,false)\r\n    const textureLoader = new THREE.TextureLoader()\r\n    this.texture = textureLoader.load(require('../../pics/z_112.png'))\r\n    this.texture.repeat.set(1, 2)\r\n    this.texture.wrapS = THREE.RepeatWrapping\r\n    this.texture.wrapT = THREE.MirroredRepeatWrapping\r\n    this.material = new THREE.MeshBasicMaterial({\r\n      map: this.texture,\r\n      transparent: true\r\n    })\r\n    this.mesh = new THREE.Mesh(this.geometry, this.material)\r\n    \r\n    // 动画\r\n    gsap.to(this.texture.offset, {\r\n      x: -1,\r\n      duration: 1,\r\n      repeat: -1,\r\n      ease: 'none'\r\n    })\r\n  }\r\n}","import * as THREE from 'three'\r\nimport gsap from 'gsap'\r\n\r\nexport default class FlyLineShader {\r\n  constructor() {\r\n    const points = [\r\n      new THREE.Vector3(0,0,0),\r\n      new THREE.Vector3(-5,4,0),\r\n      new THREE.Vector3(-10,0,0),\r\n    ]\r\n    this.lineCurve = new THREE.CatmullRomCurve3(points)\r\n    const lineCurvePoints = this. lineCurve.getPoints(1000)\r\n    this.geometry = new THREE.BufferGeometry().setFromPoints(lineCurvePoints)\r\n    \r\n    // 给每个顶点设置属性\r\n    const aSizeArray = new Float32Array(lineCurvePoints.length)\r\n    for (let i = 0; i< aSizeArray.length; i++) {\r\n      aSizeArray[i] = i\r\n    }\r\n    // 设置几何体顶点属性\r\n    this.geometry.setAttribute('aSize', new THREE.BufferAttribute(aSizeArray, 1))\r\n    this.shaderMaterial = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        uTime: {\r\n          value: 0\r\n        },\r\n        uColor: {\r\n          value: new THREE.Color(0xffff00)\r\n        },\r\n        uLength: {\r\n          value: aSizeArray.length\r\n        }\r\n      },\r\n      vertexShader: `\r\n        attribute float aSize;\r\n        varying float vSize;\r\n        uniform float uTime;\r\n        uniform float uLength;\r\n        uniform vec3 uColor;\r\n        void main() {\r\n          vec4 viewPosition = viewMatrix * modelMatrix * vec4(position, 1);\r\n          gl_Position = projectionMatrix * viewPosition;\r\n          vSize = (aSize - uTime);\r\n          if (vSize < 0.0) {\r\n            vSize = vSize + uLength;\r\n          }\r\n          vSize = (vSize - 100.0)* 0.1;\r\n          // gl_PointSize = vSize;\r\n          // vSize上面为固定值，远离为负值，取反,效果为 远离细，靠近粗\r\n          gl_PointSize = -(vSize/viewPosition.z);\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        varying float vSize;\r\n        void main() {\r\n          float distanceToCenter = distance(gl_PointCoord, vec2(0.5, 0.5));\r\n          // 横截面处理为圆形\r\n          float strength = 1.0 - (distanceToCenter * 2.0);\r\n          if (vSize <= 0.0) {\r\n            gl_FragColor = vec4(1, 0, 0, 0);\r\n            return;\r\n          }\r\n          gl_FragColor = vec4(1, 0, 0, strength);\r\n        }\r\n      `,\r\n      transparent: true,\r\n      depthWrite: false,\r\n      blending: THREE.AdditiveBlending\r\n    })\r\n    this.mesh = new THREE.Points(this.geometry, this.shaderMaterial)\r\n    gsap.to(this.shaderMaterial.uniforms.uTime, {\r\n      value: 1000,\r\n      duration: 3,\r\n      repeat: -1,\r\n      ease: 'none'\r\n    })\r\n  }\r\n}","import * as THREE from 'three'\r\nimport gsap from 'gsap'\r\n\r\nexport default class LightWall {\r\n  constructor() {\r\n    this.geometry = new THREE.CylinderGeometry(5, 5, 2, 32, 1, true)\r\n    this.material = new THREE.ShaderMaterial({\r\n      vertexShader: `\r\n        varying vec3 vPosition;\r\n        void main() {\r\n          vec4 viewPosition = viewMatrix * modelMatrix * vec4(position, 1);\r\n          gl_Position = projectionMatrix * viewPosition;\r\n          vPosition = position;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        varying vec3 vPosition;\r\n        uniform float uHeight;\r\n        void main() {\r\n          float gradMix = 1.0 - (vPosition.y + uHeight/2.0)/uHeight;\r\n          gl_FragColor = vec4(1,1,0, gradMix);\r\n        }\r\n      `,\r\n      transparent: true,\r\n      side: THREE.DoubleSide\r\n    })\r\n    this.mesh = new THREE.Mesh(this.geometry, this.material)\r\n    this.mesh.position.set(0, 1, 0)\r\n    this.mesh.geometry.computeBoundingBox();\r\n    //   console.log(mesh.geometry.boundingBox);\r\n  \r\n    let { min, max } = this.mesh.geometry.boundingBox;\r\n    //   获取物体的高度差\r\n    let uHeight = max.y - min.y;\r\n    this.material.uniforms.uHeight = {\r\n      value: uHeight\r\n    }\r\n    gsap.to(this.mesh.scale, {\r\n      x: 0.5,\r\n      z: 0.5,\r\n      duration: 2,\r\n      repeat: -1,\r\n      yoyo: true\r\n    })\r\n  }\r\n}","import * as THREE from 'three'\r\nimport gsap from 'gsap'\r\n\r\nexport default class Radar {\r\n  constructor() {\r\n    this.geometry = new THREE.PlaneGeometry(4,4)\r\n    this.material = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        uColor: {\r\n          value: new THREE.Color('#00ff00')\r\n        },\r\n        uTime: {\r\n          value: 0\r\n        }\r\n      },\r\n      vertexShader: `\r\n        varying vec3 vPosition;\r\n        varying vec2 vUv;\r\n        void main() {\r\n          vec4 viewPosition = viewMatrix * modelMatrix * vec4(position, 1);\r\n          gl_Position = projectionMatrix * viewPosition;\r\n          vPosition = position;\r\n          vUv = uv;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        varying vec3 vPosition;\r\n        varying vec2 vUv;\r\n        uniform vec3 uColor;\r\n        uniform float uTime;\r\n\r\n        mat2 rotated2d(float _angle) {\r\n          return mat2(cos(_angle), -sin(_angle),\r\n                      sin(_angle), cos(_angle));\r\n        }\r\n\r\n        void main() {\r\n          // 0.5里面是0，外面是1， 1减去后里面就是1\r\n          float alpha = 1.0 - step(0.5, distance(vUv, vec2(0.5)));\r\n          // 雷达线\r\n          vec2 newUv = rotated2d(uTime*6.28) * (vUv - 0.5);\r\n          newUv+=0.5;\r\n          float angle = atan(newUv.x - 0.5, newUv.y-0.5);\r\n          float strength = (angle+3.14)/6.18;\r\n          gl_FragColor = vec4(uColor, alpha * strength);\r\n        }\r\n      `,\r\n      transparent: true,\r\n      side: THREE.DoubleSide\r\n    })\r\n    this.mesh = new THREE.Mesh(this.geometry, this.material)\r\n    this.mesh.position.set(-10.8, 0.5, 4)\r\n    this.mesh.rotation.x = -Math.PI/2;\r\n\r\n    gsap.to(this.material.uniforms.uTime, {\r\n      value: 1,\r\n      duration: 2,\r\n      repeat: -1,\r\n      ease: 'none'\r\n    })\r\n  }\r\n}","import * as THREE from 'three'\r\n\r\nexport default class Sign {\r\n  constructor(camera) {\r\n    this.camera = camera\r\n    const loader = new THREE.TextureLoader()\r\n    const map = loader.load(require('../../../../assets/img/react_logo.png'))\r\n    this.material = new THREE.SpriteMaterial({map})\r\n    this.mesh = new THREE.Sprite(this.material)\r\n    this.mesh.position.set(-4.2, 3.5, -1)\r\n    \r\n    this.fns = {\r\n      onClick: []\r\n    }\r\n\r\n    this.raycaster = new THREE.Raycaster()\r\n    this.mouse = new THREE.Vector2()\r\n\r\n    window.addEventListener('click', (e) => {\r\n      this.mouse.x = (e.clientX/window.innerWidth)*2-1 // -1~1\r\n      this.mouse.y = -((e.clientY/window.innerHeight)*2-1) \r\n      this.raycaster.setFromCamera(this.mouse, this.camera)\r\n      const intersects = this.raycaster.intersectObject(this.mesh)\r\n      if (!intersects.length) {\r\n        return\r\n      }\r\n      this.fns.onClick.forEach(fn => {\r\n        fn(e)\r\n      })\r\n    })\r\n  }\r\n  onClick(fn) {\r\n    this.fns['onClick'].push(fn)\r\n  }\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"panel\":\"city2_panel__sR3Mo\",\"header\":\"city2_header__u5IeZ\",\"main\":\"city2_main__eqrwe\",\"left\":\"city2_left__WfN46\",\"right\":\"city2_right__TIYdl\",\"cityEvent\":\"city2_cityEvent__I5Ce7\",\"cityEvent_before\":\"city2_cityEvent_before__HrUpW\",\"cityEvent_after\":\"city2_cityEvent_after__HaGZl\",\"footerBorder\":\"city2_footerBorder__mWi9U\",\"footerBorder_before\":\"city2_footerBorder_before__vyabQ\",\"footerBorder_after\":\"city2_footerBorder_after__OBsdr\",\"icon\":\"city2_icon__a2qCr\",\"time\":\"city2_time__77TtF\",\"list\":\"city2_list__E24xA\",\"active\":\"city2_active__+UsbN\"};","import React, { useEffect, useRef } from \"react\";\r\nimport * as Three from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\r\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\";\r\nimport modifyCityMaterial from \"./utils/city2/modifyCityMaterial\";\r\nimport FlyLine from \"./utils/city2/flyLine\";\r\nimport FlyLineShader from \"./shader/city2/flyLine\";\r\nimport LightWall from \"./utils/city2/lightWall\";\r\nimport Radar from \"./utils/city2/radar\";\r\nimport Sign from \"./utils/city2/sign\";\r\nimport styles from './css/city2.module.css'\r\nconst sence = new Three.Scene();\r\nconst camera = new Three.PerspectiveCamera(\r\n  75,\r\n  window.innerWidth / window.innerHeight,\r\n  0.1,\r\n  10000\r\n)\r\n\r\ncamera.position.set(5, 10, 15)\r\nsence.add(camera)\r\n\r\nconst renderer = new Three.WebGLRenderer()\r\nconst controls = new OrbitControls(camera, renderer.domElement)\r\n// 设置阻尼，让控制器更真实, 必须在动画循环调用update方法\r\ncontrols.enableDamping = true\r\nrenderer.setSize(window.innerWidth, window.innerHeight)\r\n\r\n\r\nlet self = {}\r\n\r\nclass MeshLine {\r\n  constructor(geometry) {\r\n    const edges = new Three.EdgesGeometry(geometry);\r\n    this.material = new Three.LineBasicMaterial({ color: 0xffffff });\r\n    const line = new Three.LineSegments(edges, this.material);\r\n    this.geometry = edges;\r\n    this.mesh = line;\r\n  }\r\n}\r\n\r\n\r\nexport default function () {\r\n  const container = useRef()\r\n\r\n  useEffect(() => {\r\n    init()\r\n    window.addEventListener('resize', onWindowResize, false);//窗口变化监听\r\n    container.current.appendChild(renderer.domElement)\r\n    refresh()\r\n    return () => {\r\n      self = {}\r\n    }\r\n  }, [])\r\n\r\n  function init() {\r\n    initBackground()\r\n    self.loader = new GLTFLoader()\r\n    const dracoLoader = new DRACOLoader()\r\n    dracoLoader.setDecoderPath('./draco/')\r\n    self.loader.setDRACOLoader(dracoLoader)\r\n    self.loader.load('/github_pages/threejs_learn/model/city2.glb', gltf => {\r\n      self.gltf = gltf\r\n\r\n      gltf.scene.traverse((item) => {\r\n        if (item.type == \"Mesh\") {\r\n          const cityMaterial = new Three.MeshBasicMaterial({\r\n            color: new Three.Color(0x0c0e33),\r\n          });\r\n          item.material = cityMaterial;\r\n          modifyCityMaterial(item);\r\n          // 生成物体白框\r\n          if (item.name == \"Layerbuildings\") {\r\n            const meshLine = new MeshLine(item.geometry);\r\n            const size = item.scale.x;\r\n            meshLine.mesh.scale.set(size, size, size);\r\n            sence.add(meshLine.mesh);\r\n          }\r\n        }\r\n      });\r\n\r\n      sence.add(gltf.scene)\r\n\r\n      // const flyLine = new FlyLine()\r\n      const flyLine = new FlyLine()\r\n      sence.add(flyLine.mesh)\r\n      const flyLineShader = new FlyLineShader()\r\n      sence.add(flyLineShader.mesh)\r\n\r\n      const lightWall = new LightWall()\r\n      sence.add(lightWall.mesh)\r\n\r\n      const radar = new Radar()\r\n      sence.add(radar.mesh)\r\n\r\n      const sign = new Sign(camera)\r\n      sence.add(sign.mesh)\r\n      sign.onClick(function () {\r\n        console.log(\"TTT点击图标\")\r\n        alert('点击图标')\r\n      })\r\n    })\r\n  }\r\n  function initBackground() {\r\n    const textures = new Three.CubeTextureLoader()\r\n    const texturesCube = textures.load([\r\n      require('./pics/1.jpg'),\r\n      require('./pics/2.jpg'),\r\n      require('./pics/3.jpg'),\r\n      require('./pics/4.jpg'),\r\n      require('./pics/5.jpg'),\r\n      require('./pics/6.jpg')\r\n    ])\r\n    sence.background = texturesCube\r\n    sence.environment = texturesCube\r\n  }\r\n\r\n  function onWindowResize() {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n\r\n    camera.aspect = width / height;//获得当前摄像机缩放比\r\n    camera.updateProjectionMatrix();//更新矩阵\r\n    renderer.setSize(width, height);\r\n  }\r\n\r\n  function refresh(time) {\r\n    renderer.render(sence, camera)\r\n    window.requestAnimationFrame(refresh)\r\n  }\r\n\r\n  return <div>\r\n    <div ref={container}></div>\r\n    <OprationPanel></OprationPanel>\r\n  </div>\r\n}\r\n\r\nfunction OprationPanel() {\r\n  useEffect(() => {\r\n    const d = document.documentElement\r\n    const cw = d.clientWidth || 750;\r\n    d.style.fontSize = 'calc(100vw / 19.2)'\r\n    return () => {\r\n      d.style.fontSize = ''\r\n    }\r\n  })\r\n  return <div className={styles.panel}>\r\n    <div className={styles.header}>我是标题</div>\r\n    <div className={styles.main}>\r\n      <div className={styles.left}>\r\n        {\r\n          [0, 0, 0].map((e, i) => {\r\n            return <div className={styles.cityEvent} key={i}>\r\n              <div className={styles.cityEvent_before}></div>\r\n              <h3 className={styles.h3}>xx事件</h3>\r\n              <h1 className={styles.h1}><span>1000(件)</span></h1>\r\n              <div className={styles.cityEvent_after}></div>\r\n              <div className={styles.footerBorder}>\r\n                <div className={styles.footerBorder_before}></div>\r\n                <div className={styles.footerBorder_after}></div>\r\n              </div>\r\n            </div>\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  </div>\r\n}","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFileLoader,\n\tLoader\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass DRACOLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t}\n\n\tsetDecoderPath( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetDecoderConfig( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.decodeDracoFile( buffer, onLoad ).catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tdecodeDracoFile( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tconst taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\treturn this.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t}\n\n\tdecodeGeometry( buffer, taskConfig ) {\n\n\t\tconst taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet worker;\n\t\tconst taskID = this.workerNextTaskID ++;\n\t\tconst taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tconst geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t}\n\n\t_createGeometry( geometryData ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tconst attribute = geometryData.attributes[ i ];\n\t\t\tconst name = attribute.name;\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\t_loadLibrary( url, responseType ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t}\n\n\tpreload() {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t}\n\n\t_initDecoder() {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tconst useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tconst librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tconst jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tconst fn = DRACOWorker.toString();\n\n\t\t\t\tconst body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t}\n\n\t_getWorker( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n\n\tlet decoderConfig;\n\tlet decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tconst taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tconst draco = module.draco;\n\t\t\t\t\tconst decoder = new draco.Decoder();\n\t\t\t\t\tconst decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tconst buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tconst attributeIDs = taskConfig.attributeIDs;\n\t\tconst attributeTypes = taskConfig.attributeTypes;\n\n\t\tlet dracoGeometry;\n\t\tlet decodingStatus;\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tconst geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( const attributeName in attributeIDs ) {\n\n\t\t\tconst attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tlet attribute;\n\t\t\tlet attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tconst numFaces = dracoGeometry.num_faces();\n\t\tconst numIndices = numFaces * 3;\n\t\tconst byteLength = numIndices * 4;\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tconst index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tconst numComponents = attribute.num_components();\n\t\tconst numPoints = dracoGeometry.num_points();\n\t\tconst numValues = numPoints * numComponents;\n\t\tconst byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tconst dataType = getDracoDataType( draco, attributeType );\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tconst array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n}\n\nexport { DRACOLoader };\n"],"names":["modifyCityMaterial","mesh","material","onBeforeCompile","shader","fragmentShader","replace","geometry","computeBoundingBox","_mesh$geometry$boundi","boundingBox","min","uHeight","max","y","uniforms","uTopColor","value","THREE","vertexShader","addGradColor","center","arguments","length","undefined","uSpreadCenter","uSpreadTime","uSpreadWidth","gsap","duration","ease","repeat","addSpread","FlyLine","_createClass","_classCallCheck","points","this","lineCurve","textureLoader","texture","load","require","set","wrapS","wrapT","map","transparent","offset","x","FlyLineShader","lineCurvePoints","getPoints","setFromPoints","aSizeArray","Float32Array","i","setAttribute","shaderMaterial","uTime","uColor","uLength","depthWrite","blending","LightWall","side","position","_this$mesh$geometry$b","scale","z","yoyo","Radar","rotation","Math","PI","Sign","camera","_this","fns","onClick","raycaster","mouse","window","addEventListener","e","clientX","innerWidth","clientY","innerHeight","setFromCamera","intersectObject","forEach","fn","key","push","sence","Three","add","renderer","OrbitControls","domElement","enableDamping","setSize","self","MeshLine","edges","color","line","container","useRef","onWindowResize","width","height","aspect","updateProjectionMatrix","refresh","time","render","requestAnimationFrame","useEffect","texturesCube","background","environment","initBackground","loader","GLTFLoader","dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","gltf","scene","traverse","item","type","cityMaterial","name","meshLine","size","flyLine","flyLineShader","lightWall","radar","sign","console","log","alert","init","current","appendChild","_jsxs","children","_jsx","ref","OprationPanel","d","document","documentElement","clientWidth","style","fontSize","className","styles","_taskCache","WeakMap","_Loader","_inherits","_super","_createSuper","manager","call","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","normal","uv","defaultAttributeTypes","path","config","url","onLoad","onProgress","onError","_this2","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","decodeDracoFile","catch","callback","attributeIDs","attributeTypes","taskConfig","useUniqueIDs","decodeGeometry","then","worker","_this3","taskKey","JSON","stringify","has","cachedTask","get","promise","byteLength","Error","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","_createGeometry","_releaseTask","geometryData","BufferGeometry","index","setIndex","BufferAttribute","array","attributes","attribute","itemSize","responseType","_initDecoder","_this4","useJS","WebAssembly","librariesPending","_loadLibrary","all","libraries","jsContent","wasmBinary","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_this5","Worker","_taskCosts","_taskLoad","onmessage","data","error","sort","a","b","terminate","Loader","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","numComponents","num_components","numValues","num_points","BYTES_PER_ELEMENT","dataType","DT_FLOAT32","Int8Array","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","Uint32Array","DT_UINT32","getDracoDataType","ptr","_malloc","GetAttributeDataArrayForAllPoints","HEAPF32","slice","_free","onModuleLoaded","DracoDecoderModule","module","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","error_msg","attributeID","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","numIndices","GetTrianglesUInt32Array","decodeIndex","destroy","buffers","attr"],"sourceRoot":""}