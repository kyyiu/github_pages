{"version":3,"file":"static/js/306.7b2d88a3.chunk.js","mappings":"2LAKMA,EAAQ,IAAIC,EAAAA,IACZC,EAAS,IAAID,EAAAA,IACf,GACAE,OAAOC,WAAWD,OAAOE,YACzB,GACA,KAGJL,EAAMM,IAAM,IAAIL,EAAAA,IAAU,SAAU,EAAG,IAEvCC,EAAOK,SAASC,IAAI,EAAE,EAAE,IACxBR,EAAMS,IAAIP,GAEV,IAAI,IAAIQ,EAAI,EAAGA,EAAE,GAAGA,IAAK,CAGrB,IAFA,IAAMC,EAAW,IAAIV,EAAAA,IACfW,EAAc,IAAIC,aAAa,GAC7BC,EAAI,EAAEA,EAAG,EAAGA,IAChBF,EAAYE,GAAqB,GAAhBC,KAAKC,SAAgB,EAE1CL,EAASM,aAAa,WAAY,IAAIhB,EAAAA,IAAsBW,EAAa,IACzE,IAAIM,EAAQ,IAAIjB,EAAAA,IAAYc,KAAKC,SAASD,KAAKC,SAASD,KAAKC,UACvDG,EAAW,IAAIlB,EAAAA,IAAwB,CAACiB,MAAAA,EAAOE,aAAa,EAAMC,QAAS,KAC3EC,EAAO,IAAIrB,EAAAA,IAAWU,EAAUQ,GACtCnB,EAAMS,IAAIa,EACd,CAEA,IAAMC,EAAW,IAAItB,EAAAA,IAMN,aACX,IAAMuB,GAAYC,EAAAA,EAAAA,UAOlB,SAASC,EAAQC,GACfJ,EAASK,OAAO5B,EAAOE,GACvBC,OAAO0B,sBAAsBH,EAC/B,CAEA,OAVAI,EAAAA,EAAAA,YAAU,WACRN,EAAUO,QAAQC,YAAYT,EAASU,YACvCP,GACF,GAAG,KAOIQ,EAAAA,EAAAA,KAAA,OAAKC,IAAKX,GACnB,CAnBFD,EAASa,QAAQjC,OAAOC,WAAYD,OAAOE,aAC1B,IAAIgC,EAAAA,EAAcnC,EAAQqB,EAASU,YAE3CK,eAAgB,C","sources":["practice/bufferGem.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as Three from 'three'\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\r\n\r\n\r\nconst sence = new Three.Scene();\r\nconst camera = new Three.PerspectiveCamera(\r\n    75,\r\n    window.innerWidth/window.innerHeight,\r\n    0.1,\r\n    1000\r\n)\r\n// 0xffffff使用的是颜色的十六进制表示法，代表白色。1代表的是near（近处）属性值，10代表的是far（远处）属性值。这两个属性确定了雾化效果的起始位置以及浓度加深的程度。\r\nsence.fog = new Three.Fog(0xffffff, 1, 10)\r\n\r\ncamera.position.set(0,0,10)\r\nsence.add(camera)\r\n\r\nfor(let i = 0; i<50;i++) {\r\n    const geometry = new Three.BufferGeometry();\r\n    const positionArr = new Float32Array(9);\r\n    for(let j = 0;j <9; j++) {\r\n        positionArr[j] = Math.random() * 10 - 5;\r\n    }\r\n    geometry.setAttribute(\"position\", new Three.BufferAttribute(positionArr, 3))\r\n    let color = new Three.Color(Math.random(),Math.random(),Math.random())\r\n    const material = new Three.MeshBasicMaterial({color, transparent: true, opacity: 0.5})\r\n    const mesh = new Three.Mesh(geometry, material)\r\n    sence.add(mesh)\r\n}\r\n\r\nconst renderer = new Three.WebGLRenderer()\r\nrenderer.setSize(window.innerWidth, window.innerHeight)\r\nconst controls = new OrbitControls(camera, renderer.domElement)\r\n// 设置阻尼，让控制器更真实, 必须在动画循环调用update方法\r\ncontrols.enableDamping = true\r\n\r\nexport default function() {\r\n    const container = useRef()\r\n  \r\n    useEffect(() => {\r\n      container.current.appendChild(renderer.domElement)\r\n      refresh()\r\n    }, [])\r\n\r\n    function refresh(time) {\r\n      renderer.render(sence, camera)\r\n      window.requestAnimationFrame(refresh)\r\n    }\r\n  \r\n    return <div ref={container}></div>\r\n  }"],"names":["sence","Three","camera","window","innerWidth","innerHeight","fog","position","set","add","i","geometry","positionArr","Float32Array","j","Math","random","setAttribute","color","material","transparent","opacity","mesh","renderer","container","useRef","refresh","time","render","requestAnimationFrame","useEffect","current","appendChild","domElement","_jsx","ref","setSize","OrbitControls","enableDamping"],"sourceRoot":""}