{"version":3,"file":"static/js/358.9cb97f01.chunk.js","mappings":"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","sources":["practice/comprehensive/city.js","../node_modules/three/examples/jsm/loaders/DRACOLoader.js","../node_modules/three/examples/jsm/loaders/RGBELoader.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as Three from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\r\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\";\r\nimport gsap from \"gsap\";\r\n\r\nconst sence = new Three.Scene();\r\nconst camera = new Three.PerspectiveCamera(\r\n  75,\r\n  window.innerWidth / window.innerHeight,\r\n  1,\r\n  100000\r\n)\r\n\r\ncamera.position.set(1000, 1000, 1000)\r\nsence.add(camera)\r\n\r\nconst renderer = new Three.WebGLRenderer({\r\n  antialias: true, // 抗锯齿\r\n  logarithmicDepthBuffer: true, // 防止地面和物体过近出现闪烁\r\n})\r\n\r\nrenderer.setSize(window.innerWidth, window.innerHeight)\r\nlet self = {\r\n  camera\r\n}\r\n\r\nconst cameraDic = {\r\n  default: camera\r\n}\r\n\r\nconst controls = new OrbitControls(self.camera, renderer.domElement)\r\n// 设置阻尼，让控制器更真实, 必须在动画循环调用update方法\r\ncontrols.enableDamping = true\r\n\r\nexport default function () {\r\n  const container = useRef()\r\n  const [view, setView] = useState(0)\r\n  const [hotballAni, setHotballAni] = useState(0)\r\n  const [clicked, setClicked] = useState([])\r\n  useEffect(() => {\r\n    self.clock = new Three.Clock()\r\n    window.addEventListener('resize', onWindowResize, false);//窗口变化监听\r\n    init()\r\n    container.current.appendChild(renderer.domElement)\r\n    refresh()\r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize)\r\n      self = {}\r\n    }\r\n  }, [])\r\n  useEffect(() => {\r\n    const div = document.querySelector('.panel'); \r\n    div.scrollTop = div.scrollHeight; \r\n  }, [clicked])\r\n\r\n  function init() {\r\n    self.loader = new GLTFLoader()\r\n    const dracoLoader = new DRACOLoader()\r\n    dracoLoader.setDecoderPath('./draco/')\r\n    self.loader.setDRACOLoader(dracoLoader)\r\n    self.loader.load('/github_pages/threejs_learn/model/city4.glb', gltf => {\r\n      self.gltf = gltf\r\n      sence.add(gltf.scene)\r\n      gltf.scene.traverse(child => {\r\n        if (child.name === '热气球'){\r\n          self.mixer = new Three.AnimationMixer(child)\r\n          self.clip = gltf.animations[0]\r\n          self.action = self.mixer.clipAction(self.clip)\r\n          self.action.play()\r\n        }\r\n        if (child.name === '汽车园区轨迹') {\r\n          const line = child\r\n          // 隐藏线条\r\n          line.visible = false\r\n          // \r\n          // 根据点创建曲线\r\n          const points = []\r\n          for (let i = line.geometry.attributes.position.count - 1; i>=0; i--) {\r\n            points.push(new Three.Vector3(\r\n              line.geometry.attributes.position.getX(i),\r\n              line.geometry.attributes.position.getY(i),\r\n              line.geometry.attributes.position.getZ(i)\r\n            ))\r\n          }\r\n          self.curve = new Three.CatmullRomCurve3(points)\r\n          self.curveProgress = 0\r\n          carAni()\r\n        }\r\n        if (child.name === 'redcar') {\r\n          self.redcar = child\r\n        }\r\n      })\r\n      gltf.cameras.forEach((c) => {\r\n        // sence.add(c)\r\n        cameraDic[c.name] = c\r\n      })\r\n    })\r\n    const hdrLoader = new RGBELoader()\r\n    hdrLoader.loadAsync(require('../vr_house/hdr/h.hdr')).then(texture => {\r\n      sence.background = texture // 类似天空盒子\r\n      sence.environment = texture //纹理贴图将会被设为场景中所有物理材质的环境贴图\r\n      // 环境映射，用于等距圆柱投影的环境贴图，也被叫做经纬线映射贴图。\r\n      // 等距圆柱投影贴图表示沿着其水平中线360°的视角，以及沿着其垂直轴向180°的视角。\r\n      // 贴图顶部和底部的边缘分别对应于它所映射的球体的北极和南极。\r\n      sence.environment.mapping = Three.EquirectangularReflectionMapping\r\n    })\r\n    renderer.shadowMap.enabled = true\r\n    // hdr环境贴图\r\n    // renderer.toneMapping = THREE.NoToneMapping\r\n    // 普通环境贴图\r\n    renderer.toneMapping = Three.ACESFilmicToneMapping\r\n    // 光照渲染强度\r\n    renderer.toneMappingExposure = 1.5\r\n    initLight()\r\n  }\r\n\r\n  function initLight() {\r\n    const light = new Three.DirectionalLight(0xffffff, 1)\r\n    light.position.set(10,100,10)\r\n  }\r\n\r\n  function toggleHotBallAction() {\r\n    setHotballAni((cur) => {\r\n      const next = +(!cur)\r\n      self.action.stop()\r\n      self.action.reset()\r\n      self.clip = self.gltf.animations[next]\r\n      self.action = self.mixer.clipAction(self.clip)\r\n      self.action.play()\r\n      return next\r\n    })\r\n  }\r\n\r\n  function carAni() {\r\n    if (!self.curve) {\r\n      return\r\n    }\r\n    gsap.to(self, {\r\n      curveProgress: 0.999,\r\n      duration: 10,\r\n      repeat: -1,\r\n      onUpdate: () => {\r\n        if (!self.curve) {\r\n          return\r\n        }\r\n        const point = self.curve.getPoint(self.curveProgress)\r\n        self.redcar.position.set(point.x, point.y,point.z)\r\n        if (self.curveProgress + 0.001 < 1) {\r\n          const point = self.curve.getPoint(self.curveProgress + 0.001)\r\n          self.redcar.lookAt(point)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  function changeCamera() {\r\n    const idx = (view+1)%3\r\n    const d = ['default', 'carcamera_Orientation', 'rightcamera_Orientation']\r\n    const name = d[idx]\r\n    setView(idx)\r\n    if (cameraDic[name]) {\r\n      self.camera = cameraDic[name]\r\n      self.camera.aspect = window.innerWidth / window.innerHeight;\r\n      self.camera.updateProjectionMatrix();\r\n    }\r\n  }\r\n\r\n  function onWindowResize() {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    // raycaster只对mesh对象有感应，而导入的模型基本是group的，\r\n    // 所以intersectObject的第二个参数必须为true，要检查后代才能拿到该模型。\r\n    // 如果目标模型的同级模型干扰严重，也可以采用在模型外部新建一个透明的mesh进行包裹绑定\r\n    self.camera.aspect = width / height;//获得当前摄像机缩放比\r\n    self.camera.updateProjectionMatrix();//更新矩阵\r\n    renderer.setSize(width, height);\r\n  }\r\n\r\n  function refresh(time) {\r\n    if (!self.camera) {\r\n      return\r\n    }\r\n    if (self.mixer) {\r\n      const t = self.clock.getDelta()\r\n      self.mixer.update(t * 2)\r\n    }\r\n    renderer.render(sence, self.camera)\r\n    window.requestAnimationFrame(refresh)\r\n  }\r\n\r\n  function handleClick(e) {\r\n    const raycaster = new Three.Raycaster()\r\n    const pointer   = new Three.Vector2()\r\n    // 将鼠标位置归一化为设备坐标。x 和 y 方向的取值范围是 (-1 to +1)\r\n    pointer.x = (e.clientX / window.innerWidth) * 2 -1\r\n    pointer.y = -(e.clientY/window.innerHeight) * 2 +1 \r\n    raycaster.setFromCamera(pointer, self.camera)\r\n    // 计算物体和射线的焦点\r\n    const intersects = raycaster.intersectObjects( sence.children );\r\n    // for (let i = 0; i < intersects.length; i++) {\r\n    //   intersects[i].object.material.color.set(0xff0000);\r\n    // }\r\n    if (intersects.length) {\r\n      setClicked([...clicked, intersects[0].object.name])\r\n    }\r\n    console.log(\"click---\", intersects)\r\n  }\r\n\r\n  return <div style={{position: 'relative', userSelect: 'none'}}>\r\n    <div ref={container} onClick={handleClick}></div>\r\n    <div style={{position: 'absolute', right: 0, top: 0, width: '200px'}}>\r\n      <div className=\"panel\" style={{height: '250px', overflow: 'auto', background: 'rgba(255,255,255, .8)'}}>\r\n        <div>点击记录</div>\r\n        {\r\n          clicked.map((e, i) => {\r\n            return <div key={i}>点击了{e}</div>\r\n          })\r\n        }\r\n      </div>\r\n      <div style={{height: '4px'}}></div>\r\n      <div style={{background: 'rgba(255,255,255, .8)', cursor: 'pointer'}} onClick={toggleHotBallAction}>\r\n        切换热气球动画(当前{hotballAni ? '环绕' : '横穿'})\r\n      </div>\r\n      <div style={{height: '4px'}}></div>\r\n      <div style={{background: 'rgba(255,255,255, .8)', cursor: 'pointer'}} onClick={changeCamera}>切换3种视角(当前{view+1})</div>\r\n    </div>\r\n    \r\n  </div>\r\n}","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFileLoader,\n\tLoader\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass DRACOLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t}\n\n\tsetDecoderPath( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetDecoderConfig( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.decodeDracoFile( buffer, onLoad ).catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tdecodeDracoFile( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tconst taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\treturn this.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t}\n\n\tdecodeGeometry( buffer, taskConfig ) {\n\n\t\tconst taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet worker;\n\t\tconst taskID = this.workerNextTaskID ++;\n\t\tconst taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tconst geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t}\n\n\t_createGeometry( geometryData ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tconst attribute = geometryData.attributes[ i ];\n\t\t\tconst name = attribute.name;\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\t_loadLibrary( url, responseType ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t}\n\n\tpreload() {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t}\n\n\t_initDecoder() {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tconst useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tconst librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tconst jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tconst fn = DRACOWorker.toString();\n\n\t\t\t\tconst body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t}\n\n\t_getWorker( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n\n\tlet decoderConfig;\n\tlet decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tconst taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tconst draco = module.draco;\n\t\t\t\t\tconst decoder = new draco.Decoder();\n\t\t\t\t\tconst decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tconst buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tconst attributeIDs = taskConfig.attributeIDs;\n\t\tconst attributeTypes = taskConfig.attributeTypes;\n\n\t\tlet dracoGeometry;\n\t\tlet decodingStatus;\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tconst geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( const attributeName in attributeIDs ) {\n\n\t\t\tconst attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tlet attribute;\n\t\t\tlet attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tconst numFaces = dracoGeometry.num_faces();\n\t\tconst numIndices = numFaces * 3;\n\t\tconst byteLength = numIndices * 4;\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tconst index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tconst numComponents = attribute.num_components();\n\t\tconst numPoints = dracoGeometry.num_points();\n\t\tconst numValues = numPoints * numComponents;\n\t\tconst byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tconst dataType = getDracoDataType( draco, attributeType );\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tconst array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n}\n\nexport { DRACOLoader };\n","import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearEncoding,\n\tLinearFilter\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( 'THREE.RGBELoader Read Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( 'THREE.RGBELoader Write Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( 'THREE.RGBELoader Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( 'THREE.RGBELoader: Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 3 ] = DataUtils.toHalfFloat( 1 );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tconst w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tlet data, type;\n\t\t\t\tlet numElements;\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = floatArray;\n\t\t\t\t\t\ttype = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = halfArray;\n\t\t\t\t\t\ttype = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n"],"names":["sence","Three","camera","window","innerWidth","innerHeight","position","set","add","renderer","antialias","logarithmicDepthBuffer","setSize","self","cameraDic","default","container","useRef","_useState","useState","_useState2","_slicedToArray","view","setView","_useState3","_useState4","hotballAni","setHotballAni","_useState5","_useState6","clicked","setClicked","onWindowResize","width","height","aspect","updateProjectionMatrix","refresh","time","mixer","t","clock","getDelta","update","render","requestAnimationFrame","useEffect","addEventListener","loader","GLTFLoader","dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","load","gltf","scene","traverse","child","name","clip","animations","action","clipAction","play","line","visible","points","i","geometry","attributes","count","push","getX","getY","getZ","curve","curveProgress","gsap","duration","repeat","onUpdate","point","getPoint","redcar","x","y","z","lookAt","carAni","cameras","forEach","c","RGBELoader","loadAsync","require","then","texture","background","environment","mapping","shadowMap","enabled","toneMapping","toneMappingExposure","init","current","appendChild","domElement","removeEventListener","div","document","querySelector","scrollTop","scrollHeight","_jsxs","style","userSelect","children","_jsx","ref","onClick","e","raycaster","pointer","clientX","clientY","setFromCamera","intersects","intersectObjects","length","concat","_toConsumableArray","object","console","log","right","top","className","overflow","map","cursor","cur","next","stop","reset","idx","OrbitControls","enableDamping","_taskCache","WeakMap","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","normal","color","uv","defaultAttributeTypes","_createClass","key","value","path","this","config","url","onLoad","onProgress","onError","_this2","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","decodeDracoFile","catch","callback","attributeIDs","attributeTypes","taskConfig","useUniqueIDs","decodeGeometry","worker","_this3","taskKey","JSON","stringify","has","cachedTask","get","promise","byteLength","Error","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","_releaseTask","geometryData","BufferGeometry","index","setIndex","BufferAttribute","array","attribute","itemSize","setAttribute","responseType","undefined","_initDecoder","_this4","useJS","WebAssembly","librariesPending","_loadLibrary","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_this5","Worker","_taskCosts","_taskLoad","onmessage","data","error","sort","a","b","terminate","Loader","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","numComponents","num_components","numValues","num_points","BYTES_PER_ELEMENT","dataType","Float32Array","DT_FLOAT32","Int8Array","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","Uint32Array","DT_UINT32","getDracoDataType","ptr","_malloc","GetAttributeDataArrayForAllPoints","HEAPF32","slice","_free","onModuleLoaded","DracoDecoderModule","module","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","error_msg","attributeID","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","numIndices","GetTrianglesUInt32Array","decodeIndex","destroy","buffers","attr","_DataTextureLoader","HalfFloatType","rgbe_error","rgbe_error_code","msg","fgets","lineLimit","consume","p","pos","len","s","chunk","String","fromCharCode","apply","subarray","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","scale","Math","pow","RGBEByteToRGBHalf","DataUtils","min","byteArray","rgbe_header_info","match","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","h","image_rgba_data","scanline_width","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","isEncodedRun","byteValue","l","off","RGBE_ReadPixels_RLE","numElements","FloatType","floatArray","j","halfArray","_get","_getPrototypeOf","prototype","texData","encoding","LinearEncoding","minFilter","LinearFilter","magFilter","generateMipmaps","flipY","DataTextureLoader"],"sourceRoot":""}