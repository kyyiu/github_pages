{"version":3,"file":"static/js/140.6027572a.chunk.js","mappings":"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","sources":["webpack://three/./src/practice/vr_house/dataDemo.module.css?3e48","../node_modules/three/examples/jsm/postprocessing/Pass.js","../node_modules/three/examples/jsm/postprocessing/RenderPass.js","../node_modules/three/examples/jsm/shaders/CopyShader.js","../node_modules/three/examples/jsm/postprocessing/OutlinePass.js","../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../node_modules/three/examples/jsm/postprocessing/EffectComposer.js","practice/vr_house/dataDemo.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"header\":\"dataDemo_header__CxMeI\"};","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n","/**\n * Full-screen textured quad shader\n */\n\nconst CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor.a *= opacity;\n\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tDoubleSide,\n\tMatrix4,\n\tMeshDepthMaterial,\n\tNoBlending,\n\tRGBADepthPacking,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass OutlinePass extends Pass {\n\n\tconstructor( resolution, scene, camera, selectedObjects ) {\n\n\t\tsuper();\n\n\t\tthis.renderScene = scene;\n\t\tthis.renderCamera = camera;\n\t\tthis.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n\t\tthis.visibleEdgeColor = new Color( 1, 1, 1 );\n\t\tthis.hiddenEdgeColor = new Color( 0.1, 0.04, 0.02 );\n\t\tthis.edgeGlow = 0.0;\n\t\tthis.usePatternTexture = false;\n\t\tthis.edgeThickness = 1.0;\n\t\tthis.edgeStrength = 3.0;\n\t\tthis.downSampleRatio = 2;\n\t\tthis.pulsePeriod = 0;\n\n\t\tthis._visibilityCache = new Map();\n\n\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\tconst resx = Math.round( this.resolution.x / this.downSampleRatio );\n\t\tconst resy = Math.round( this.resolution.y / this.downSampleRatio );\n\n\t\tthis.renderTargetMaskBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y );\n\t\tthis.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n\t\tthis.renderTargetMaskBuffer.texture.generateMipmaps = false;\n\n\t\tthis.depthMaterial = new MeshDepthMaterial();\n\t\tthis.depthMaterial.side = DoubleSide;\n\t\tthis.depthMaterial.depthPacking = RGBADepthPacking;\n\t\tthis.depthMaterial.blending = NoBlending;\n\n\t\tthis.prepareMaskMaterial = this.getPrepareMaskMaterial();\n\t\tthis.prepareMaskMaterial.side = DoubleSide;\n\t\tthis.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ( this.prepareMaskMaterial.fragmentShader, this.renderCamera );\n\n\t\tthis.renderTargetDepthBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y );\n\t\tthis.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n\t\tthis.renderTargetDepthBuffer.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget( resx, resy );\n\t\tthis.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n\t\tthis.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetBlurBuffer1 = new WebGLRenderTarget( resx, resy );\n\t\tthis.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n\t\tthis.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n\t\tthis.renderTargetBlurBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ) );\n\t\tthis.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n\t\tthis.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n\n\t\tthis.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n\t\tthis.renderTargetEdgeBuffer1 = new WebGLRenderTarget( resx, resy );\n\t\tthis.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n\t\tthis.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n\t\tthis.renderTargetEdgeBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ) );\n\t\tthis.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n\t\tthis.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n\n\t\tconst MAX_EDGE_THICKNESS = 4;\n\t\tconst MAX_EDGE_GLOW = 4;\n\n\t\tthis.separableBlurMaterial1 = this.getSeperableBlurMaterial( MAX_EDGE_THICKNESS );\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\n\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = 1;\n\t\tthis.separableBlurMaterial2 = this.getSeperableBlurMaterial( MAX_EDGE_GLOW );\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( Math.round( resx / 2 ), Math.round( resy / 2 ) );\n\t\tthis.separableBlurMaterial2.uniforms[ 'kernelRadius' ].value = MAX_EDGE_GLOW;\n\n\t\t// Overlay material\n\t\tthis.overlayMaterial = this.getOverlayMaterial();\n\n\t\t// copy material\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\t\tthis.copyUniforms[ 'opacity' ].value = 1.0;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t\tthis.tempPulseColor1 = new Color();\n\t\tthis.tempPulseColor2 = new Color();\n\t\tthis.textureMatrix = new Matrix4();\n\n\t\tfunction replaceDepthToViewZ( string, camera ) {\n\n\t\t\tconst type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n\n\t\t\treturn string.replace( /DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ' );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTargetMaskBuffer.dispose();\n\t\tthis.renderTargetDepthBuffer.dispose();\n\t\tthis.renderTargetMaskDownSampleBuffer.dispose();\n\t\tthis.renderTargetBlurBuffer1.dispose();\n\t\tthis.renderTargetBlurBuffer2.dispose();\n\t\tthis.renderTargetEdgeBuffer1.dispose();\n\t\tthis.renderTargetEdgeBuffer2.dispose();\n\n\t\tthis.depthMaterial.dispose();\n\t\tthis.prepareMaskMaterial.dispose();\n\t\tthis.edgeDetectionMaterial.dispose();\n\t\tthis.separableBlurMaterial1.dispose();\n\t\tthis.separableBlurMaterial2.dispose();\n\t\tthis.overlayMaterial.dispose();\n\t\tthis.materialCopy.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.renderTargetMaskBuffer.setSize( width, height );\n\t\tthis.renderTargetDepthBuffer.setSize( width, height );\n\n\t\tlet resx = Math.round( width / this.downSampleRatio );\n\t\tlet resy = Math.round( height / this.downSampleRatio );\n\t\tthis.renderTargetMaskDownSampleBuffer.setSize( resx, resy );\n\t\tthis.renderTargetBlurBuffer1.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer1.setSize( resx, resy );\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\t\tresy = Math.round( resy / 2 );\n\n\t\tthis.renderTargetBlurBuffer2.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer2.setSize( resx, resy );\n\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( resx, resy );\n\n\t}\n\n\tchangeVisibilityOfSelectedObjects( bVisible ) {\n\n\t\tconst cache = this._visibilityCache;\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( bVisible === true ) {\n\n\t\t\t\t\tobject.visible = cache.get( object );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcache.set( object, object.visible );\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tconst selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t}\n\n\tchangeVisibilityOfNonSelectedObjects( bVisible ) {\n\n\t\tconst cache = this._visibilityCache;\n\t\tconst selectedMeshes = [];\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) selectedMeshes.push( object );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tconst selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t\tfunction VisibilityChangeCallBack( object ) {\n\n\t\t\tif ( object.isMesh || object.isSprite ) {\n\n\t\t\t\t// only meshes and sprites are supported by OutlinePass\n\n\t\t\t\tlet bFound = false;\n\n\t\t\t\tfor ( let i = 0; i < selectedMeshes.length; i ++ ) {\n\n\t\t\t\t\tconst selectedObjectId = selectedMeshes[ i ].id;\n\n\t\t\t\t\tif ( selectedObjectId === object.id ) {\n\n\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( bFound === false ) {\n\n\t\t\t\t\tconst visibility = object.visible;\n\n\t\t\t\t\tif ( bVisible === false || cache.get( object ) === true ) {\n\n\t\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcache.set( object, visibility );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints || object.isLine ) {\n\n\t\t\t\t// the visibilty of points and lines is always set to false in order to\n\t\t\t\t// not affect the outline computation\n\n\t\t\t\tif ( bVisible === true ) {\n\n\t\t\t\t\tobject.visible = cache.get( object ); // restore\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcache.set( object, object.visible );\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderScene.traverse( VisibilityChangeCallBack );\n\n\t}\n\n\tupdateTextureMatrix() {\n\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0 );\n\t\tthis.textureMatrix.multiply( this.renderCamera.projectionMatrix );\n\t\tthis.textureMatrix.multiply( this.renderCamera.matrixWorldInverse );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( this.selectedObjects.length > 0 ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\t\tconst oldAutoClear = renderer.autoClear;\n\n\t\t\trenderer.autoClear = false;\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t\trenderer.setClearColor( 0xffffff, 1 );\n\n\t\t\t// Make selected objects invisible\n\t\t\tthis.changeVisibilityOfSelectedObjects( false );\n\n\t\t\tconst currentBackground = this.renderScene.background;\n\t\t\tthis.renderScene.background = null;\n\n\t\t\t// 1. Draw Non Selected objects in the depth buffer\n\t\t\tthis.renderScene.overrideMaterial = this.depthMaterial;\n\t\t\trenderer.setRenderTarget( this.renderTargetDepthBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\n\t\t\t// Make selected objects visible\n\t\t\tthis.changeVisibilityOfSelectedObjects( true );\n\t\t\tthis._visibilityCache.clear();\n\n\t\t\t// Update Texture Matrix for Depth compare\n\t\t\tthis.updateTextureMatrix();\n\n\t\t\t// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( false );\n\t\t\tthis.renderScene.overrideMaterial = this.prepareMaskMaterial;\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'cameraNearFar' ].value.set( this.renderCamera.near, this.renderCamera.far );\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'depthTexture' ].value = this.renderTargetDepthBuffer.texture;\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'textureMatrix' ].value = this.textureMatrix;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\t\t\tthis.renderScene.overrideMaterial = null;\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( true );\n\t\t\tthis._visibilityCache.clear();\n\n\t\t\tthis.renderScene.background = currentBackground;\n\n\t\t\t// 2. Downsample to Half resolution\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetMaskBuffer.texture;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskDownSampleBuffer );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.tempPulseColor1.copy( this.visibleEdgeColor );\n\t\t\tthis.tempPulseColor2.copy( this.hiddenEdgeColor );\n\n\t\t\tif ( this.pulsePeriod > 0 ) {\n\n\t\t\t\tconst scalar = ( 1 + 0.25 ) / 2 + Math.cos( performance.now() * 0.01 / this.pulsePeriod ) * ( 1.0 - 0.25 ) / 2;\n\t\t\t\tthis.tempPulseColor1.multiplyScalar( scalar );\n\t\t\t\tthis.tempPulseColor2.multiplyScalar( scalar );\n\n\t\t\t}\n\n\t\t\t// 3. Apply Edge Detection Pass\n\t\t\tthis.fsQuad.material = this.edgeDetectionMaterial;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskDownSampleBuffer.texture;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'texSize' ].value.set( this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height );\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'visibleEdgeColor' ].value = this.tempPulseColor1;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'hiddenEdgeColor' ].value = this.tempPulseColor2;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// 4. Apply Blur on Half res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial1;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = this.edgeThickness;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Apply Blur on quarter res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial2;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer2.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Blend it additively over the input texture\n\t\t\tthis.fsQuad.material = this.overlayMaterial;\n\t\t\tthis.overlayMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskBuffer.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture1' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture2' ].value = this.renderTargetEdgeBuffer2.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'patternTexture' ].value = this.patternTexture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeStrength' ].value = this.edgeStrength;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeGlow' ].value = this.edgeGlow;\n\t\t\tthis.overlayMaterial.uniforms[ 'usePatternTexture' ].value = this.usePatternTexture;\n\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t}\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tgetPrepareMaskMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'depthTexture': { value: null },\n\t\t\t\t'cameraNearFar': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'textureMatrix': { value: null }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t\tvPosition = mvPosition;\n\n\t\t\t\t\tvec4 worldPosition = vec4( transformed, 1.0 );\n\n\t\t\t\t\t#ifdef USE_INSTANCING\n\n\t\t\t\t\t\tworldPosition = instanceMatrix * worldPosition;\n\n\t\t\t\t\t#endif\n\t\t\t\t\t\n\t\t\t\t\tworldPosition = modelMatrix * worldPosition;\n\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\n\t\t\t\t}`\n\n\t\t} );\n\n\t}\n\n\tgetEdgeDetectionMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'maskTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'visibleEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t\t'hiddenEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetSeperableBlurMaterial( maxRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'MAX_RADIUS': maxRadius,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'kernelRadius': { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat sigma = kernelRadius/2.0;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, sigma);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = kernelRadius * float(i) / float(MAX_RADIUS);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, sigma);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetOverlayMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'maskTexture': { value: null },\n\t\t\t\t'edgeTexture1': { value: null },\n\t\t\t\t'edgeTexture2': { value: null },\n\t\t\t\t'patternTexture': { value: null },\n\t\t\t\t'edgeStrength': { value: 1.0 },\n\t\t\t\t'edgeGlow': { value: 1.0 },\n\t\t\t\t'usePatternTexture': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t}\n\n}\n\nOutlinePass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nOutlinePass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { OutlinePass };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tClock,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\n\t\tthis.copyPass.dispose();\n\n\t}\n\n}\n\nexport { EffectComposer };\n","import React, { useEffect, useRef } from \"react\";\r\nimport * as Three from 'three'\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\r\nimport styles from './dataDemo.module.css'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\n\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\n\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\r\n\r\nexport default function() {\r\n\r\n    const sence = new Three.Scene();\r\n    const camera = new Three.PerspectiveCamera(\r\n        25,\r\n        window.innerWidth/window.innerHeight,\r\n        0.1,\r\n        1000\r\n    )\r\n\r\n    camera.position.set(-20,0,0)\r\n    camera.lookAt(0, 0 , 0)\r\n    sence.add(camera)\r\n\r\n    const renderer = new Three.WebGLRenderer()\r\n    const controls = new OrbitControls(camera, renderer.domElement)\r\n    // 设置阻尼，让控制器更真实, 必须在动画循环调用update方法\r\n    controls.enableDamping = true\r\n    renderer.setSize(window.innerWidth, window.innerHeight)\r\n\r\n    const self = {\r\n      mouse: new Three.Vector2(),\r\n      composer: null,\r\n      effectFXAA: null, \r\n      outlinePass: null,\r\n      visibleEdgeColor: '#00ff00',\r\n      hiddenEdgeColor: '#190a05',\r\n      selectedObjects: []\r\n    }\r\n\r\n    const container = useRef()\r\n  \r\n    useEffect(() => {\r\n      init()\r\n      window.addEventListener( 'resize', onWindowResize, false );//窗口变化监听\r\n      container.current.appendChild(renderer.domElement)\r\n      refresh()\r\n    }, [])\r\n\r\n    function init() {\r\n      initLight()\r\n      initSkybox()\r\n      initRaycaster()\r\n      initModel()\r\n      initEdgeAttr()\r\n      initEvent()\r\n\r\n      const g = new Three.BoxGeometry()\r\n      const gm = new Three.Mesh(g, new Three.MeshBasicMaterial({color: '#ff0000'}))\r\n      gm.position.set(3, 2, 0)\r\n      sence.add(gm)\r\n    }\r\n\r\n    function initLight() {\r\n      const ambient = new Three.AmbientLight(0xffffff, 0.5)\r\n      sence.add(ambient)\r\n      const light = new Three.DirectionalLight(0xffffff)\r\n      light.position.set(0, 200, 100)\r\n      light.castShadow = true\r\n      light.shadow.camera.top = 180\r\n      light.shadow.camera.bottom = -100\r\n      light.shadow.camera.left = -120\r\n      light.shadow.camera.right = 400\r\n      light.shadow.camera.near = 0.1\r\n      light.shadow.camera.far = 400\r\n      // mapsize 使阴影更清晰\r\n      light.shadow.mapSize.set(1024, 1024)\r\n      sence.add(light)\r\n    }\r\n\r\n    function initSkybox() {\r\n      const loader = new Three.CubeTextureLoader()\r\n      const cubeTexture = loader.load([\r\n        require('../../assets/img/night/posx.jpg'),\r\n        require('../../assets/img/night/negx.jpg'),\r\n        require('../../assets/img/night/posy.jpg'),\r\n        require('../../assets/img/night/negy.jpg'),\r\n        require('../../assets/img/night/posz.jpg'),\r\n        require('../../assets/img/night/negz.jpg')\r\n      ])\r\n      sence.background = cubeTexture\r\n      // sence.fog = new Three.Fog(new Three.Color(0xa0a0a0, 500, 2000))\r\n    }\r\n\r\n    function initRaycaster() {\r\n      self.raycaster = new Three.Raycaster()\r\n    }\r\n\r\n    function initModel() {\r\n      const loader = new GLTFLoader()\r\n      loader.load(require(\"../../assets/gameSource/plane/microplane.glb\"), gltf => {\r\n        sence.add(gltf.scene)\r\n        self.plane = gltf.scene\r\n        // 螺旋桨\r\n        self.propeller = self.plane.getObjectByName(\"propeller\");\r\n      })\r\n    }\r\n\r\n    function initEdgeAttr() {\r\n      self.composer = new EffectComposer( renderer );\r\n      const renderPass = new RenderPass( sence, camera );\r\n      self.composer.addPass( renderPass );\r\n\r\n      self.outlinePass = new OutlinePass( new Three.Vector2( window.innerWidth, window.innerHeight ), sence, camera );\r\n      self.composer.addPass( self.outlinePass );\r\n\r\n      // const outputPass = new OutputPass();\r\n      // self.composer.addPass( outputPass );\r\n\r\n      // self.effectFXAA = new ShaderPass( FXAAShader );\r\n      // self.effectFXAA.uniforms[ 'resolution' ].value.set( 1 / window.innerWidth, 1 / window.innerHeight );\r\n      // self.composer.addPass( self.effectFXAA );\r\n    }\r\n\r\n    function addSelectedObject( object ) {\r\n\r\n      self.selectedObjects = [];\r\n      self.selectedObjects.push( object );\r\n\r\n    }\r\n\r\n    function checkIntersection() {\r\n\r\n      self.raycaster.setFromCamera( self.mouse, camera );\r\n\r\n      const intersects = self.raycaster.intersectObject( sence, true );\r\n      if ( intersects.length > 0 ) {\r\n\r\n        const selectedObject = intersects[ 0 ].object;\r\n        addSelectedObject( selectedObject );\r\n        self.outlinePass.selectedObjects = self.selectedObjects;\r\n\r\n      } else {\r\n\r\n        self.outlinePass.selectedObjects = [];\r\n\r\n      }\r\n\r\n    }\r\n\r\n    function onPointerMove( event ) {\r\n\r\n      if ( event.isPrimary === false ) return;\r\n\r\n      self.mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\r\n      self.mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n      checkIntersection();\r\n\r\n    }\r\n\r\n    function initEvent() {\r\n      container.current.addEventListener('mousemove', onPointerMove)\r\n    }\r\n\r\n    function onWindowResize() {\r\n      const width = window.innerWidth;\r\n      const height = window.innerHeight;\r\n\r\n      camera.aspect = width / height;//获得当前摄像机缩放比\r\n      camera.updateProjectionMatrix();//更新矩阵\r\n      renderer.setSize( width, height );\r\n    }\r\n\r\n    function refresh(time) {\r\n      renderer.render(sence, camera)\r\n      self.composer.render()\r\n      window.requestAnimationFrame(refresh)\r\n    }\r\n  \r\n    return <div>\r\n      <div className={styles.header}>高亮边框选中demo</div>\r\n      <div ref={container}></div>\r\n    </div>\r\n  }"],"names":["Pass","_classCallCheck","this","enabled","needsSwap","clear","renderToScreen","_createClass","key","value","console","error","_camera","OrthographicCamera","_geometry","BufferGeometry","setAttribute","Float32BufferAttribute","FullScreenQuad","material","_mesh","Mesh","geometry","dispose","renderer","render","get","set","RenderPass","_Pass","_inherits","_super","_createSuper","scene","camera","overrideMaterial","clearColor","clearAlpha","_this","call","undefined","clearDepth","_oldClearColor","Color","writeBuffer","readBuffer","oldClearAlpha","oldOverrideMaterial","oldAutoClear","autoClear","getClearColor","getClearAlpha","setClearColor","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","CopyShader","uniforms","vertexShader","fragmentShader","OutlinePass","resolution","selectedObjects","renderScene","renderCamera","visibleEdgeColor","hiddenEdgeColor","edgeGlow","usePatternTexture","edgeThickness","edgeStrength","downSampleRatio","pulsePeriod","_visibilityCache","Map","Vector2","x","y","resx","Math","round","resy","renderTargetMaskBuffer","WebGLRenderTarget","texture","name","generateMipmaps","depthMaterial","MeshDepthMaterial","side","DoubleSide","depthPacking","RGBADepthPacking","blending","NoBlending","prepareMaskMaterial","getPrepareMaskMaterial","string","type","isPerspectiveCamera","replace","replaceDepthToViewZ","renderTargetDepthBuffer","renderTargetMaskDownSampleBuffer","renderTargetBlurBuffer1","renderTargetBlurBuffer2","edgeDetectionMaterial","getEdgeDetectionMaterial","renderTargetEdgeBuffer1","renderTargetEdgeBuffer2","separableBlurMaterial1","getSeperableBlurMaterial","separableBlurMaterial2","overlayMaterial","getOverlayMaterial","copyShader","copyUniforms","UniformsUtils","materialCopy","ShaderMaterial","depthTest","depthWrite","transparent","fsQuad","tempPulseColor1","tempPulseColor2","textureMatrix","Matrix4","width","height","setSize","bVisible","cache","gatherSelectedMeshesCallBack","object","isMesh","visible","i","length","traverse","selectedMeshes","push","isSprite","bFound","id","visibility","isPoints","isLine","multiply","projectionMatrix","matrixWorldInverse","deltaTime","maskActive","state","buffers","stencil","setTest","changeVisibilityOfSelectedObjects","currentBackground","background","updateTextureMatrix","changeVisibilityOfNonSelectedObjects","near","far","copy","scalar","cos","performance","now","multiplyScalar","BlurDirectionX","BlurDirectionY","patternTexture","Vector3","maxRadius","defines","AdditiveBlending","ShaderPass","shader","textureID","Object","assign","MaskPass","inverse","writeValue","clearValue","context","getContext","color","setMask","depth","setLocked","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","_Pass2","_super2","_this2","EffectComposer","renderTarget","size","getSize","_pixelRatio","getPixelRatio","_width","_height","renderTarget1","renderTarget2","clone","passes","copyPass","clock","Clock","tmp","pass","index","splice","indexOf","passIndex","getDelta","currentRenderTarget","getRenderTarget","il","isLastEnabledPass","NOTEQUAL","swapBuffers","effectiveWidth","effectiveHeight","pixelRatio","sence","Three","window","innerWidth","innerHeight","position","lookAt","add","OrbitControls","domElement","enableDamping","self","mouse","composer","effectFXAA","outlinePass","container","useRef","checkIntersection","raycaster","setFromCamera","intersects","intersectObject","selectedObject","onPointerMove","event","isPrimary","clientX","clientY","onWindowResize","aspect","updateProjectionMatrix","refresh","time","requestAnimationFrame","useEffect","ambient","light","castShadow","shadow","top","bottom","left","right","mapSize","initLight","cubeTexture","load","require","initSkybox","GLTFLoader","gltf","plane","propeller","getObjectByName","renderPass","addPass","initEdgeAttr","current","addEventListener","g","gm","init","appendChild","_jsxs","children","_jsx","className","styles","ref"],"sourceRoot":""}