{"version":3,"file":"static/js/428.5bf61189.chunk.js","mappings":"+MAYMA,GAFQ,IAAIC,EAAAA,IAEJ,IAAIA,EAAAA,KAEZC,EAAS,IAAID,EAAAA,IACjB,GACAE,OAAOC,WAAWD,OAAOE,YACzB,GACA,KAGFH,EAAOI,SAASC,IAAI,EAAE,EAAE,IACxBP,EAAMQ,IAAIN,GAEV,IAAMO,EAAe,IAAIR,EAAAA,IAAkB,EAAE,EAAE,GACzCS,EAAe,IAAIT,EAAAA,IAAwB,CAACU,MAAO,WACnDC,EAAO,IAAIX,EAAAA,IAAWQ,EAAcC,GAU1CE,EAAKC,MAAMC,EAAI,EAUfd,EAAMQ,IAAII,GAGV,IAAMG,EAAW,IAAId,EAAAA,IAIfe,EAAW,IAAIC,EAAAA,EAAcf,EAAQa,EAASG,YAEpDF,EAASG,eAAgB,EAEzBJ,EAASK,QAAQjB,OAAOC,WAAYD,OAAOE,aAI3C,IA4BIgB,EA5BEC,EAAa,IAAIrB,EAAAA,IAAiB,GAoEzB,aACb,IAAMsB,GAAYC,EAAAA,EAAAA,UAqClB,SAASC,EAAQC,GAQfV,EAASW,SACTZ,EAASa,OAAO5B,EAAOE,GACvBC,OAAO0B,sBAAsBJ,EAC/B,CAEA,OAhDAK,EAAAA,EAAAA,YAAU,WAKR,OA/CJ,YACGT,EAAM,IAAIU,EAAAA,IAENvB,IAAII,EAAKN,SAAU,KACrB0B,IAAI,GACJC,IAAI,GACJC,KAAK,KACLC,KAAK,4BAELC,UAAS,SAAAC,GAAI,IAEbC,gBAAe,SAAAD,GAAI,IAGpB,IAAME,EAAI,CACN5B,MAAO,UACP6B,GAAG,WACCC,EAAAA,GAAAA,GAAQ7B,EAAKN,SAAU,CACnBQ,EAAG,EACH4B,QAAS,EACTC,SAAU,EACVC,MAAM,GAEd,GAEJvB,EAAIwB,SAASN,EAAG,SACXH,UAAS,SAAAC,GACNzB,EAAKkC,SAASnC,MAAMJ,IAAI8B,EAC5B,IAEJhB,EAAIb,IAAII,EAAM,WAAWuB,KAAK,4BAE9Bd,EAAIb,IAAI+B,EAAG,MAAMJ,KAAK,4BAEtB,IAAMY,EAAa1B,EAAI2B,UAAU,oBACjCD,EAAWvC,IAAII,EAAKkC,SAAU,aAC9BC,EAAWvC,IAAI+B,EAAG,MAAMJ,KAAK,2BACjC,CAMIc,GAmBA9C,OAAO+C,iBAAiB,UAAU,WAC9BC,QAAQC,IAAI,OAEZlD,EAAOmD,OAASlD,OAAOC,WAAWD,OAAOE,YAEzCH,EAAQoD,yBAERvC,EAASK,QAAQjB,OAAOC,WAAYD,OAAOE,aAE3CU,EAASwC,cAAcpD,OAAOqD,iBAClC,IA3BAjC,EAAUkC,QAAQC,YAAY3C,EAASG,YACvCO,IACO,WACLJ,EAAIsC,SACN,CACF,GAAG,KAwCIC,EAAAA,EAAAA,KAAA,OAAKC,IAAKtC,EAAWuC,cAtC5B,WACuBC,SAASC,kBAE1BD,SAASE,iBAGblD,EAASG,WAAWgD,mBACtB,GAgCF,CAvHAlE,EAAMQ,IAAIc,E","sources":["practice/basic.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as Three from 'three'\r\n// 导入轨道控制器\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\r\n// 使用gsap动画库\r\nimport gsap from 'gsap'\r\n// \r\nimport * as dat from 'dat.gui'\r\n\r\n// 创建时钟\r\nconst clock = new Three.Clock()\r\n// 创建场景\r\nconst sence = new Three.Scene();\r\n// 场景相机\r\nconst camera = new Three.PerspectiveCamera(\r\n  75,\r\n  window.innerWidth/window.innerHeight,\r\n  0.1,\r\n  1000\r\n)\r\n\r\ncamera.position.set(0,0,10)\r\nsence.add(camera)\r\n// 添加物体\r\nconst cubeGeometry = new Three.BoxGeometry(1,1,1)\r\nconst cubeMaterial = new Three.MeshBasicMaterial({color: 0xffff00})\r\nconst cube = new Three.Mesh(cubeGeometry, cubeMaterial)\r\n\r\n// 修改物体的位置\r\n// 方案1\r\n// cube.position.set(3, 0, 0)\r\n// 方案2\r\n// cube.position.x = 2\r\n\r\n// 物体缩放\r\n// cube.scale.set(x, y, z)\r\ncube.scale.x = 2\r\n// 0会消失，z会反过来\r\n// 比如vr看房这种功能\r\n// cube.scale.set(1, 1, -1)\r\n// 会让相机从内部看房的效果\r\n\r\n// 物体旋转\r\n// x轴旋转45°\r\n// cube.rotation.set(Math.PI/4, 0, 0)\r\n\r\nsence.add(cube)\r\n\r\n// 初始化渲染器\r\nconst renderer = new Three.WebGLRenderer()\r\n// 创建轨道控制器\r\n// 使相机围绕目标进行轨道移动\r\n// 长按鼠标左键移动查看\r\nconst controls = new OrbitControls(camera, renderer.domElement)\r\n// 设置阻尼，让控制器更真实, 必须在动画循环调用update方法\r\ncontrols.enableDamping = true\r\n// 数值渲染的尺寸\r\nrenderer.setSize(window.innerWidth, window.innerHeight)\r\n// document.body.appendChild()\r\n// 添加坐标轴辅助\r\n// 红色x，绿色y，蓝色z\r\nconst axesHelper = new Three.AxesHelper(5)\r\nsence.add(axesHelper)\r\n\r\n// 使用gsap设置动画\r\n// gsap.to(cube.position, {x: 5, duration: 5,\r\n//     // 重复次数， -1无限次重复\r\n// // repeat: -1,\r\n// // 来回运动\r\n// // yoyo: true\r\n// })\r\n// gsap.to(cube.rotation, {x: 2 * Math.PI, duration: 5, ease: \"power1.in\", \r\n// onStart(){\r\n//     console.log('动画开始')\r\n// },\r\n// onComplete() {\r\n//     console.log(\"动画完成\")\r\n// }})\r\n\r\n// window.addEventListener('dblclick', () => {\r\n//     console.log('mmm')\r\n//     const isFullScreen = window.document.fullscreenElement\r\n//     if (isFullScreen) {\r\n//         window.document.exitFullscreen()\r\n//         return\r\n//     }\r\n//     renderer.domElement.requestFullscreen()\r\n// })\r\n\r\nlet gui\r\nfunction datguiSetting() {\r\n   gui = new dat.GUI()\r\n//    修改几何属性\r\n   gui.add(cube.position, 'x')\r\n    .min(0)\r\n    .max(5) \r\n    .step(0.01)\r\n    .name('cube-x轴移动')\r\n    // 变化时触发\r\n    .onChange(v=>{})\r\n    // 变化完成触发\r\n    .onFinishChange(v=>{})\r\n\r\n    // 修改颜色\r\n    const c = {\r\n        color: \"#fff000\",\r\n        fn:() => {\r\n            gsap.to(cube.position, {\r\n                x: 5, \r\n                repeat: -1,\r\n                duration: 2,\r\n                yoyo: true\r\n            })\r\n        }\r\n    }\r\n    gui.addColor(c, 'color')\r\n        .onChange(v=>{\r\n            cube.material.color.set(v)\r\n        })\r\n    // 是否显示\r\n    gui.add(cube, 'visible').name('是否显示')\r\n    // 点击按钮触发某个事件\r\n    gui.add(c, \"fn\").name('点击触发')\r\n    // 文件夹设置\r\n    const cubeFolder = gui.addFolder(\"设置cube\")\r\n    cubeFolder.add(cube.material, 'wireframe')\r\n    cubeFolder.add(c, \"fn\").name('点击触发')\r\n}\r\n\r\nexport default function() {\r\n  const container = useRef()\r\n\r\n  useEffect(() => {\r\n    datguiSetting()\r\n    windowChange()\r\n    container.current.appendChild(renderer.domElement)\r\n    refresh()\r\n    return () => {\r\n      gui.destroy()\r\n    }\r\n  }, [])\r\n\r\n  function onFullWindow() {\r\n    const isFullScreen = document.fullscreenElement\r\n    if (isFullScreen) {\r\n        document.exitFullscreen()\r\n        return\r\n    }\r\n    renderer.domElement.requestFullscreen()\r\n  }\r\n\r\n  function windowChange() {\r\n    window.addEventListener('resize', ()=>{\r\n        console.log('rrr')\r\n        // 更新摄像机\r\n        camera.aspect = window.innerWidth/window.innerHeight\r\n        // 更新摄像机的投影矩阵\r\n        camera .updateProjectionMatrix()\r\n        // 更新渲染器\r\n        renderer.setSize(window.innerWidth, window.innerHeight)\r\n        // 设置渲染器像素比\r\n        renderer.setPixelRatio(window.devicePixelRatio)\r\n    })\r\n  }\r\n\r\n  //requestAnimationFrame调用 refresh 时会传入时间作为参数\r\n  // 可以根据这个参数做一个和时间匹配的动画\r\n  function refresh(time) {\r\n    // 获取时钟运行总时长\r\n    // const passedTime = clock.getElapsedTime()\r\n    // // 两次获取时间的间隔\r\n    // // const timeGap = clock.getDelta()\r\n    // const offset = passedTime % 5\r\n    // // const offset = time / 1000 % 5\r\n    // cube.position.x = offset\r\n    controls.update()\r\n    renderer.render(sence, camera)\r\n    window.requestAnimationFrame(refresh)\r\n  }\r\n\r\n  return <div ref={container} onDoubleClick={onFullWindow}></div>\r\n}"],"names":["sence","Three","camera","window","innerWidth","innerHeight","position","set","add","cubeGeometry","cubeMaterial","color","cube","scale","x","renderer","controls","OrbitControls","domElement","enableDamping","setSize","gui","axesHelper","container","useRef","refresh","time","update","render","requestAnimationFrame","useEffect","dat","min","max","step","name","onChange","v","onFinishChange","c","fn","gsap","repeat","duration","yoyo","addColor","material","cubeFolder","addFolder","datguiSetting","addEventListener","console","log","aspect","updateProjectionMatrix","setPixelRatio","devicePixelRatio","current","appendChild","destroy","_jsx","ref","onDoubleClick","document","fullscreenElement","exitFullscreen","requestFullscreen"],"sourceRoot":""}